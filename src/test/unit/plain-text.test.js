import { Seal } from '../../index.js'

let Morfix = null
let parms = null
let context = null
let encoder = null

let ckksParms = null
let ckksContext = null
let ckksEncoder = null

beforeAll(async () => {
  Morfix = await Seal
  parms = Morfix.EncryptionParameters(Morfix.SchemeType.BFV)
  parms.setPolyModulusDegree(4096)
  parms.setCoeffModulus(
    Morfix.CoeffModulus.BFVDefault(4096, Morfix.SecurityLevel.tc128)
  )
  parms.setPlainModulus(Morfix.PlainModulus.Batching(4096, 20))
  context = Morfix.Context(parms, true, Morfix.SecurityLevel.tc128)
  encoder = Morfix.BatchEncoder(context)

  ckksParms = Morfix.EncryptionParameters(Morfix.SchemeType.CKKS)
  ckksParms.setPolyModulusDegree(4096)
  ckksParms.setCoeffModulus(
    Morfix.CoeffModulus.Create(4096, Int32Array.from([46, 16, 46]))
  )
  ckksContext = Morfix.Context(ckksParms, true, Morfix.SecurityLevel.tc128)
  ckksEncoder = Morfix.CKKSEncoder(ckksContext)
})

describe('PlainText', () => {
  test('It should be a factory', () => {
    expect(Morfix).toHaveProperty('PlainText')
    expect(Morfix.PlainText).toBeDefined()
    expect(typeof Morfix.PlainText.constructor).toBe('function')
    expect(Morfix.PlainText).toBeInstanceOf(Object)
    expect(Morfix.PlainText.constructor).toBe(Function)
    expect(Morfix.PlainText.constructor.name).toBe('Function')
  })
  test('It should have properties', () => {
    const item = Morfix.PlainText()
    // Test properties
    expect(item).toHaveProperty('instance')
    expect(item).toHaveProperty('inject')
    expect(item).toHaveProperty('delete')
    expect(item).toHaveProperty('reserve')
    expect(item).toHaveProperty('shrinkToFit')
    expect(item).toHaveProperty('release')
    expect(item).toHaveProperty('resize')
    expect(item).toHaveProperty('setZero')
    expect(item).toHaveProperty('isZero')
    expect(item).toHaveProperty('capacity')
    expect(item).toHaveProperty('coeffCount')
    expect(item).toHaveProperty('significantCoeffCount')
    expect(item).toHaveProperty('nonzeroCoeffCount')
    expect(item).toHaveProperty('toPolynomial')
    expect(item).toHaveProperty('isNttForm')
    expect(item).toHaveProperty('scale')
    expect(item).toHaveProperty('pool')
    expect(item).toHaveProperty('save')
    expect(item).toHaveProperty('copy')
    expect(item).toHaveProperty('clone')
    expect(item).toHaveProperty('move')
  })
  test('It should have an instance', () => {
    const item = Morfix.PlainText()
    expect(item.instance).not.toBeFalsy()
  })
  test('It should inject', () => {
    const item = Morfix.PlainText()
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'inject')
    newItem.inject(item.instance)
    expect(spyOn).toHaveBeenCalledWith(item.instance)
  })
  test("It should delete it's instance", () => {
    const item = Morfix.PlainText()
    const spyOn = jest.spyOn(item, 'delete')
    item.delete()
    expect(spyOn).toHaveBeenCalled()
    expect(item.instance).toBeNull()
    expect(() => item.isZero).toThrow(TypeError)
  })
  test('It should reserve memory', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'reserve')
    item.reserve(encoder.slotCount * 2)
    expect(spyOn).toHaveBeenCalledWith(encoder.slotCount * 2)
    expect(item.capacity).toEqual(encoder.slotCount * 2)
  })
  test('It should shrink', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    item.reserve(encoder.slotCount * 2)
    const spyOn = jest.spyOn(item, 'shrinkToFit')
    item.shrinkToFit()
    expect(spyOn).toHaveBeenCalledWith()
    expect(item.capacity).toEqual(encoder.slotCount)
  })
  test('It should release allocated memory', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'release')
    item.release()
    expect(spyOn).toHaveBeenCalledWith()
    expect(item.scale).toEqual(1)
    expect(item.isZero).toEqual(true)
    expect(item.capacity).toEqual(0)
  })
  test('It should resize', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'resize')
    item.resize(encoder.slotCount * 2)
    expect(spyOn).toHaveBeenCalledWith(encoder.slotCount * 2)
    expect(item.capacity).toEqual(encoder.slotCount * 2)
  })
  test('It should be set to zero', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'setZero')
    item.setZero()
    expect(spyOn).toHaveBeenCalledWith()
    expect(item.isZero).toEqual(true)
  })
  test('It should return true if plaintext is zero', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(0)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.isZero).toEqual(true)
  })
  test('It should return false if plaintext is not zero', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.isZero).toEqual(false)
  })
  test('It should return the capacity of the current allocation', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.capacity).toEqual(encoder.slotCount)
  })
  test('It should return the coeff count', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.coeffCount).toEqual(encoder.slotCount)
  })
  test('It should return the significant coeff count', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.significantCoeffCount).toEqual(1)
  })
  test('It should return the non-zero coeff count', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.nonzeroCoeffCount).toEqual(1)
  })
  test('It should return the polynomial string', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).map((x, i) => i)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'toPolynomial')
    const str = item.toPolynomial()
    expect(typeof str).toBe('string')
    expect(str).toEqual(
      '837F9x^4095 + 86231x^4094 + 4093Ex^4093 + B7647x^4092 + A6793x^4091 + F61AFx^4090 + ABC95x^4089 + 4F32Ax^4088 + E4A90x^4087 + C3D19x^4086 + 2C82Bx^4085 + A2A3Cx^4084 + F20AAx^4083 + D75A5x^4082 + 90A8Ax^4081 + 107B9x^4080 + AC80Bx^4079 + 43FF4x^4078 + 1B015x^4077 + EF2B3x^4076 + 547F5x^4075 + 95D58x^4074 + A1E1x^4073 + 18E9x^4072 + EC46Ex^4071 + 69E08x^4070 + 65C01x^4069 + EF3Ax^4068 + F296Ex^4067 + DE4E6x^4066 + 6D51x^4065 + 33CB5x^4064 + 6721x^4063 + CDEC6x^4062 + 4E9FBx^4061 + 2694Bx^4060 + EA997x^4059 + 40F94x^4058 + 463D9x^4057 + 66DA5x^4056 + C46B0x^4055 + BF530x^4054 + 712C0x^4053 + 9F751x^4052 + 4DC9Dx^4051 + 9A9B0x^4050 + 4E763x^4049 + 3C31x^4048 + A8FC8x^4047 + 53D67x^4046 + AE961x^4045 + C6A1Cx^4044 + 133F7x^4043 + D956Cx^4042 + 4C1FFx^4041 + 70EF6x^4040 + BD6FAx^4039 + 7EE1Fx^4038 + 75DE3x^4037 + B5779x^4036 + 1E45Ex^4035 + 27BE3x^4034 + 96CACx^4033 + 7523Ax^4032 + A43B3x^4031 + 96C8Fx^4030 + 94343x^4029 + 32CDx^4028 + 77370x^4027 + EF91Cx^4026 + 49ADx^4025 + FB585x^4024 + F0DDAx^4023 + C6D44x^4022 + 1041Dx^4021 + 8690Bx^4020 + 85AD6x^4019 + 57CC9x^4018 + FB787x^4017 + BD488x^4016 + BBFE7x^4015 + D02EAx^4014 + 3CDB5x^4013 + E4D9Bx^4012 + FBD2Cx^4011 + C4CE3x^4010 + 8E990x^4009 + 95D5Bx^4008 + 4CD01x^4007 + 101E8x^4006 + BAF92x^4005 + 48864x^4004 + D1E41x^4003 + 56A1Dx^4002 + 3E07Cx^4001 + E20C3x^4000 + 70064x^3999 + BFFACx^3998 + DA1DFx^3997 + 11F92x^3996 + 77DB5x^3995 + B0D8Cx^3994 + 635C7x^3993 + F9C99x^3992 + A2399x^3991 + 6A574x^3990 + CCE87x^3989 + 3E8EBx^3988 + 8F294x^3987 + AF957x^3986 + 697F9x^3985 + 7C970x^3984 + AC201x^3983 + 31435x^3982 + DB175x^3981 + 4FFDFx^3980 + F1A2Fx^3979 + DDA3Ax^3978 + 1D294x^3977 + EC229x^3976 + BE739x^3975 + 9339Bx^3974 + F0C96x^3973 + 723C1x^3972 + B178Bx^3971 + 6DA6x^3970 + 2FD85x^3969 + F83B0x^3968 + 5D0DAx^3967 + 7B968x^3966 + 97FA9x^3965 + 3BBCDx^3964 + BE097x^3963 + F6DD3x^3962 + 14B12x^3961 + C8729x^3960 + 1C715x^3959 + 8B554x^3958 + 8FD9Cx^3957 + 7F6FFx^3956 + EC4Ex^3955 + 36AD5x^3954 + 801ECx^3953 + EB120x^3952 + 4AD93x^3951 + 56B82x^3950 + B9667x^3949 + 26DABx^3948 + 7D1D3x^3947 + D8D48x^3946 + 6B627x^3945 + AFED1x^3944 + C751x^3943 + 19114x^3942 + 3B8E1x^3941 + DF89Bx^3940 + 89DD4x^3939 + 7DAC9x^3938 + 7D3EBx^3937 + 4BC8Fx^3936 + CEDDDx^3935 + 1E0A5x^3934 + 1C902x^3933 + 97D40x^3932 + 1FAF4x^3931 + C1A48x^3930 + 96575x^3929 + C3F50x^3928 + E5DD3x^3927 + 92B3Ex^3926 + 197FEx^3925 + 13AE2x^3924 + 8AB47x^3923 + 69AB9x^3922 + 37CAx^3921 + D4BB4x^3920 + 9521Dx^3919 + B9BDFx^3918 + 56690x^3917 + 6C5EDx^3916 + 5EAA8x^3915 + AF5F5x^3914 + CAAC7x^3913 + 4F093x^3912 + 7FDC2x^3911 + 72DCCx^3910 + 65943x^3909 + 782E9x^3908 + 64E4Fx^3907 + C5B6Dx^3906 + 714A4x^3905 + 30079x^3904 + 62800x^3903 + B98A4x^3902 + 4E162x^3901 + 50227x^3900 + ABE12x^3899 + 31C05x^3898 + 1E0Cx^3897 + 25E9x^3896 + 27E89x^3895 + 97A46x^3894 + 1A967x^3893 + 21BE2x^3892 + 17989x^3891 + 4033Bx^3890 + 40515x^3889 + 40x^3888 + 8F79Ax^3887 + A7597x^3886 + B53Fx^3885 + 9146Cx^3884 + 46D71x^3883 + 93432x^3882 + 39638x^3881 + FB686x^3880 + 8CB9Dx^3879 + 6B4A2x^3878 + 2FD03x^3877 + E9C0Ex^3876 + 749DDx^3875 + AF6B1x^3874 + 3211Bx^3873 + B9A2Bx^3872 + 98D23x^3871 + 90ABCx^3870 + A78EDx^3869 + BADE2x^3868 + 2FCA5x^3867 + EC63x^3866 + 72B75x^3865 + 4C8F9x^3864 + 5C49Ex^3863 + 855Dx^3862 + B3B67x^3861 + 3C0AFx^3860 + 60265x^3859 + D56ADx^3858 + 80EE3x^3857 + 61C2Cx^3856 + 787D1x^3855 + F365Ax^3854 + C985Fx^3853 + 8CD61x^3852 + C978Ax^3851 + 7E79Dx^3850 + 69DE8x^3849 + A572Bx^3848 + 31D13x^3847 + 6BA5x^3846 + D866Fx^3845 + 3C20Bx^3844 + 716BAx^3843 + 54B4Ax^3842 + 4A335x^3841 + 9B1EDx^3840 + 8AA4Ax^3839 + DCB02x^3838 + E9030x^3837 + C3F78x^3836 + 99DDDx^3835 + A2177x^3834 + 42213x^3833 + 353F7x^3832 + 5E89Cx^3831 + 54B6x^3830 + 3A564x^3829 + 96060x^3828 + 95409x^3827 + 31CEFx^3826 + 9B7C2x^3825 + DE90Bx^3824 + 391Fx^3823 + 89351x^3822 + 9FCF5x^3821 + DE3E4x^3820 + 74324x^3819 + 5E78Fx^3818 + 40969x^3817 + DEE4Bx^3816 + B0C42x^3815 + DCDD1x^3814 + 33B0Fx^3813 + 393ECx^3812 + A599Ex^3811 + 816FCx^3810 + 36AC4x^3809 + 7BC9Ax^3808 + 8F68Bx^3807 + D6D8Cx^3806 + 75C5Ax^3805 + 316B2x^3804 + 404DEx^3803 + AF461x^3802 + F6482x^3801 + A0585x^3800 + 2E04Dx^3799 + A1ADFx^3798 + E0CA1x^3797 + 2DE08x^3796 + BD31Fx^3795 + 645Fx^3794 + 7FA8Bx^3793 + 3AEA0x^3792 + B36A9x^3791 + F956Dx^3790 + 69CEEx^3789 + 87D4Fx^3788 + AF9Fx^3787 + 81A4x^3786 + BC0BDx^3785 + A55Cx^3784 + 2250Fx^3783 + 5856Ax^3782 + 37D77x^3781 + C04x^3780 + 7D55x^3779 + C770Cx^3778 + B429Ax^3777 + 5A6F4x^3776 + CB193x^3775 + EADA3x^3774 + 23FF7x^3773 + 3EA3Cx^3772 + B746x^3771 + F8D3Ex^3770 + 8D72Bx^3769 + 8C9E8x^3768 + B7C78x^3767 + D7F2Fx^3766 + 44394x^3765 + 22BC4x^3764 + F85EEx^3763 + F3F4Ax^3762 + 24521x^3761 + EF56Bx^3760 + DF97Cx^3759 + 1D670x^3758 + 5F9A0x^3757 + F5D9x^3756 + 36B1x^3755 + 458CEx^3754 + E6D33x^3753 + 2567Dx^3752 + 4C0F5x^3751 + 3CC14x^3750 + DF6C3x^3749 + D9FBCx^3748 + 374C8x^3747 + B98BBx^3746 + 12EEAx^3745 + C57A1x^3744 + B023Dx^3743 + 19C11x^3742 + B914Bx^3741 + 81BC6x^3740 + E328Dx^3739 + 2A34x^3738 + D1E44x^3737 + 25F87x^3736 + B41Ex^3735 + EDEF0x^3734 + D4A8Ex^3733 + 78706x^3732 + 7FF5Cx^3731 + 503B1x^3730 + AADC8x^3729 + 3C56Ex^3728 + 60AB4x^3727 + 3124Dx^3726 + 6BFF9x^3725 + DE430x^3724 + 68167x^3723 + 78E58x^3722 + D8997x^3721 + B5D1Ex^3720 + 23EA1x^3719 + 74E3Fx^3718 + 3157Bx^3717 + 2DACFx^3716 + CFFEBx^3715 + ADA38x^3714 + 28573x^3713 + AFB2Dx^3712 + 1CDA2x^3711 + 47135x^3710 + 3370x^3709 + 68967x^3708 + 59710x^3707 + D6C7Ex^3706 + E9B11x^3705 + C1465x^3704 + 82045x^3703 + 894E1x^3702 + 51B00x^3701 + CF741x^3700 + 94716x^3699 + A9ABDx^3698 + 4242Ex^3697 + DEEC7x^3696 + 81E7x^3695 + A50CDx^3694 + F4FB7x^3693 + A38EAx^3692 + 5AFF5x^3691 + 9F2BEx^3690 + EA71x^3689 + 1065Ex^3688 + 97A3Ex^3687 + 14442x^3686 + 2A1A7x^3685 + 8F310x^3684 + 68193x^3683 + 54B54x^3682 + 28A94x^3681 + B6424x^3680 + 8973Cx^3679 + 1D98Dx^3678 + F496Cx^3677 + 3C71Ex^3676 + D1D6x^3675 + 65AE3x^3674 + 5FD43x^3673 + F33A6x^3672 + 24510x^3671 + 13BCEx^3670 + 9AF9Cx^3669 + 37AC3x^3668 + AA1A6x^3667 + 12CA2x^3666 + 68DB4x^3665 + CAD1Fx^3664 + B6E6x^3663 + 1BD90x^3662 + 52A72x^3661 + 7183Cx^3660 + 1F9D4x^3659 + A3EFBx^3658 + 90319x^3657 + 4987x^3656 + 87820x^3655 + 4D8ADx^3654 + A6AF2x^3653 + 8C273x^3652 + 53117x^3651 + D6849x^3650 + 40F77x^3649 + E334Ex^3648 + B1848x^3647 + A3538x^3646 + 5F7Bx^3645 + 979DFx^3644 + 917CEx^3643 + 21E3Cx^3642 + D0ABx^3641 + AC10Fx^3640 + 28CABx^3639 + D57D7x^3638 + F150Cx^3637 + A4BF7x^3636 + 50621x^3635 + A393Bx^3634 + 84EF1x^3633 + 5FB61x^3632 + E3F19x^3631 + 187A6x^3630 + D2960x^3629 + 82F53x^3628 + A1D1Dx^3627 + 827D5x^3626 + 83B28x^3625 + 57CCCx^3624 + D8C1Cx^3623 + DE131x^3622 + F1705x^3621 + 114FDx^3620 + C3F55x^3619 + 466B7x^3618 + 11DDx^3617 + 5A21Ax^3616 + 15F86x^3615 + E354Fx^3614 + 7D59Bx^3613 + 97C64x^3612 + 65A4x^3611 + CC765x^3610 + 9643Ex^3609 + 4759x^3608 + 8B38Ex^3607 + EB719x^3606 + 66103x^3605 + 722ABx^3604 + BB11Bx^3603 + 26F6x^3602 + 3AEC5x^3601 + A8605x^3600 + 742ADx^3599 + F5CBBx^3598 + 9608Fx^3597 + ECDC7x^3596 + E5E76x^3595 + C0B6Dx^3594 + 73979x^3593 + 5BC36x^3592 + F6A1Fx^3591 + 3848Ax^3590 + FA42x^3589 + A52A6x^3588 + 6E30Ax^3587 + B78F1x^3586 + D2160x^3585 + 7A64Fx^3584 + C59DEx^3583 + 95734x^3582 + 23DF6x^3581 + 4F3CFx^3580 + 253A5x^3579 + F5D6x^3578 + 8588x^3577 + 50B46x^3576 + 98A88x^3575 + 5EC88x^3574 + F4B5Cx^3573 + EE99x^3572 + 7A277x^3571 + 5D489x^3570 + D78C9x^3569 + 8CE38x^3568 + 4EEE6x^3567 + E81DAx^3566 + BA6CBx^3565 + D6E24x^3564 + 2C8BEx^3563 + F1AA7x^3562 + 2BF07x^3561 + E90Ex^3560 + B0ED7x^3559 + 46C9Fx^3558 + D6BE8x^3557 + 2A1ABx^3556 + E030Fx^3555 + 1F40x^3554 + 60514x^3553 + 712DBx^3552 + 8D1D0x^3551 + 6B5F6x^3550 + 9793x^3549 + FB200x^3548 + B2FABx^3547 + 77DBBx^3546 + E2CDx^3545 + B8F04x^3544 + 20C7Bx^3543 + 78378x^3542 + 68A02x^3541 + F1E7x^3540 + E81E4x^3539 + CBA4Dx^3538 + 3C031x^3537 + 79649x^3536 + 37B05x^3535 + 1D049x^3534 + 15117x^3533 + 685CCx^3532 + DAC3Cx^3531 + 5ACB6x^3530 + DBE9Ex^3529 + 89014x^3528 + C09E4x^3527 + 61C8Bx^3526 + 60584x^3525 + B0CECx^3524 + D5F5Bx^3523 + 962BEx^3522 + D4748x^3521 + 7533Bx^3520 + 8FBFEx^3519 + CFDDCx^3518 + 70E4x^3517 + B0A6x^3516 + 97D71x^3515 + D7C0Fx^3514 + CA992x^3513 + 1E46Cx^3512 + E4A10x^3511 + 3A7A1x^3510 + A5BE2x^3509 + DD5A7x^3508 + 32450x^3507 + 3C886x^3506 + 72256x^3505 + 906E3x^3504 + B659Ex^3503 + 7DE7Ax^3502 + 72B1Dx^3501 + A1161x^3500 + 85592x^3499 + A71FAx^3498 + 3157x^3497 + 9CC02x^3496 + 5A1E7x^3495 + 1195Cx^3494 + CBA1x^3493 + C8D5Ax^3492 + F90C4x^3491 + ABC3Ax^3490 + 5A3F5x^3489 + 60A8x^3488 + C3BC9x^3487 + 8DAC1x^3486 + 87A09x^3485 + 20FB3x^3484 + 1269Bx^3483 + CD59Fx^3482 + DBCF7x^3481 + 84C08x^3480 + 691EBx^3479 + D16B8x^3478 + 62E03x^3477 + 82732x^3476 + D43Bx^3475 + 2CA4Fx^3474 + 50C63x^3473 + AA820x^3472 + 89323x^3471 + 5333Cx^3470 + C0E2x^3469 + 5F40Bx^3468 + F6B61x^3467 + 799B1x^3466 + 4D422x^3465 + 75AD9x^3464 + 846ACx^3463 + 4FB9Ex^3462 + 72FE5x^3461 + 18C90x^3460 + FAD08x^3459 + 5325Dx^3458 + 29087x^3457 + 3491Cx^3456 + 48B42x^3455 + 2237Dx^3454 + 7EAC8x^3453 + ADC27x^3452 + 53F56x^3451 + 197EBx^3450 + DBB2Ax^3449 + C3F45x^3448 + ABA4Bx^3447 + 666AEx^3446 + 664C5x^3445 + 3F34x^3444 + 195AAx^3443 + 52E0x^3442 + F18FDx^3441 + E80EBx^3440 + 67E26x^3439 + 3C293x^3438 + CC880x^3437 + 19E75x^3436 + 749ACx^3435 + C7053x^3434 + 3757Bx^3433 + 302E9x^3432 + E1FE0x^3431 + 23DCFx^3430 + 62F8Dx^3429 + EF91Ex^3428 + 1853Cx^3427 + 45B9Bx^3426 + 23883x^3425 + F5203x^3424 + EC286x^3423 + 7F69Ex^3422 + BE508x^3421 + 44CBFx^3420 + E7313x^3419 + 608D5x^3418 + 56707x^3417 + FBDAx^3416 + 3EE76x^3415 + B53FAx^3414 + BAE27x^3413 + 3DB44x^3412 + 98215x^3411 + 54798x^3410 + 773E7x^3409 + BEBE8x^3408 + 34837x^3407 + 55239x^3406 + 65A06x^3405 + 54631x^3404 + 2CCE4x^3403 + 18B35x^3402 + 9A7F8x^3401 + 6B164x^3400 + 4D336x^3399 + A7596x^3398 + B2019x^3397 + EFDF2x^3396 + 12A77x^3395 + 21E3Ax^3394 + F2F79x^3393 + 987CDx^3392 + B85A3x^3391 + 850Cx^3390 + D2B39x^3389 + 7440Dx^3388 + 4E775x^3387 + 30BD2x^3386 + 64DD2x^3385 + C06AEx^3384 + F7430x^3383 + EC87Ex^3382 + 31AB9x^3381 + 71C56x^3380 + CE262x^3379 + C0F5Fx^3378 + 2DD98x^3377 + 4F9B4x^3376 + C468Dx^3375 + 42EBAx^3374 + 65348x^3373 + 42E14x^3372 + F5326x^3371 + D808Ax^3370 + A2A26x^3369 + F1C27x^3368 + 6978Fx^3367 + CC68Dx^3366 + B5FFDx^3365 + F438Bx^3364 + 418BAx^3363 + 73D05x^3362 + A6328x^3361 + 767A3x^3360 + 41FD8x^3359 + 69E08x^3358 + D0AE5x^3357 + B419Dx^3356 + B75A8x^3355 + 339FFx^3354 + F5969x^3353 + 240CCx^3352 + 5F5F6x^3351 + 8D00Cx^3350 + 8BE25x^3349 + 70884x^3348 + E70EFx^3347 + 94CF0x^3346 + 76B6Cx^3345 + CF770x^3344 + 3C58Dx^3343 + E7933x^3342 + 8E108x^3341 + 64CB7x^3340 + F6EA5x^3339 + E47F7x^3338 + 1654Ex^3337 + 1098Ex^3336 + DA6DCx^3335 + DC2E6x^3334 + 31DEEx^3333 + 641Fx^3332 + E348x^3331 + D4110x^3330 + 5459Bx^3329 + 267E8x^3328 + 6D89Bx^3327 + 43C3Bx^3326 + 3D9FBx^3325 + 22BFAx^3324 + 63EE5x^3323 + B2C1Cx^3322 + C1440x^3321 + D8BEFx^3320 + 178CDx^3319 + 5B86Ex^3318 + CD858x^3317 + 7D3B5x^3316 + ACCF8x^3315 + 8082Ex^3314 + B8B76x^3313 + 9D30Ax^3312 + 47F93x^3311 + 3E097x^3310 + BEEE9x^3309 + 70C76x^3308 + 23F7Ax^3307 + 5507Cx^3306 + A1F55x^3305 + E4DA2x^3304 + F80Fx^3303 + 3127Bx^3302 + CAAC5x^3301 + 49FD8x^3300 + 1014Bx^3299 + A6808x^3298 + 6DD2Bx^3297 + EAE17x^3296 + BBB1Dx^3295 + E2D52x^3294 + A4889x^3293 + 1FA11x^3292 + BF93Cx^3291 + 14159x^3290 + 310FFx^3289 + AFB8Dx^3288 + EEF4x^3287 + 6CE08x^3286 + D9DDCx^3285 + CD70Bx^3284 + CFB5Dx^3283 + 377E8x^3282 + 68FFDx^3281 + 47496x^3280 + AF226x^3279 + F2F75x^3278 + CCC22x^3277 + 702FDx^3276 + F074Bx^3275 + 2347Cx^3274 + 4B1B4x^3273 + B672Fx^3272 + B34EEx^3271 + 86B9Ex^3270 + D8E39x^3269 + D5ECDx^3268 + C896Ex^3267 + 19BFBx^3266 + B9E41x^3265 + CE034x^3264 + 90EC0x^3263 + 7E4C3x^3262 + D9039x^3261 + 98BBx^3260 + 1B9D2x^3259 + 60062x^3258 + 5E1E1x^3257 + DA0B1x^3256 + 702E8x^3255 + 37103x^3254 + B0E14x^3253 + 4C531x^3252 + 39123x^3251 + 63B3Fx^3250 + 208B9x^3249 + 6E7C3x^3248 + 3E58Cx^3247 + 57BA1x^3246 + F1F66x^3245 + 40A8Fx^3244 + 3F9Fx^3243 + 579AAx^3242 + 21640x^3241 + E4D7Fx^3240 + 9E39x^3239 + 39086x^3238 + 1BF64x^3237 + D321Ax^3236 + D7D05x^3235 + F5A02x^3234 + 62CEx^3233 + B70ACx^3232 + 8B065x^3231 + FB4FDx^3230 + E770Ex^3229 + 408A7x^3228 + FAB35x^3227 + CE0C7x^3226 + A19B3x^3225 + 45ECFx^3224 + 4B2CDx^3223 + 27DB7x^3222 + F0C7Ex^3221 + BAD75x^3220 + 1F6C5x^3219 + B2F99x^3218 + 77381x^3217 + C936Ax^3216 + AC72Cx^3215 + 8C118x^3214 + 53B9Fx^3213 + 57B47x^3212 + 53864x^3211 + A519x^3210 + 61206x^3209 + 4E410x^3208 + 3A8x^3207 + DEA56x^3206 + C9916x^3205 + 7CFA9x^3204 + 949C9x^3203 + 3C424x^3202 + E6BA8x^3201 + 50787x^3200 + AC882x^3199 + 9CDDEx^3198 + 144D0x^3197 + D478Dx^3196 + A4D17x^3195 + F5527x^3194 + 83D8x^3193 + 63E41x^3192 + AE236x^3191 + 1E6DBx^3190 + C379Ax^3189 + B771Dx^3188 + CEDB5x^3187 + EFCBx^3186 + 8C290x^3185 + E627Ex^3184 + 634EBx^3183 + 3F9F9x^3182 + 322A3x^3181 + C7673x^3180 + A46E0x^3179 + 2C327x^3178 + 78CE6x^3177 + DD773x^3176 + 825F4x^3175 + C1F62x^3174 + E1195x^3173 + 959Ax^3172 + B9C2Ex^3171 + 1F286x^3170 + 50AFEx^3169 + 6E2DCx^3168 + 7DD7Bx^3167 + AB9BFx^3166 + 153CFx^3165 + E7F0Cx^3164 + EA35Cx^3163 + D352Ax^3162 + DC99Dx^3161 + 79D41x^3160 + 9F9EBx^3159 + 32544x^3158 + 5038Ax^3157 + A8581x^3156 + D8872x^3155 + 431Fx^3154 + 55F15x^3153 + 65186x^3152 + 71C74x^3151 + F5957x^3150 + AAFB8x^3149 + E1397x^3148 + 5B45Ex^3147 + B6337x^3146 + 7CF90x^3145 + A48F9x^3144 + 84451x^3143 + D623Dx^3142 + 1D214x^3141 + F33CDx^3140 + 3290Bx^3139 + E436Dx^3138 + 19FF6x^3137 + 90E26x^3136 + 8F73Ex^3135 + E9CF8x^3134 + EF779x^3133 + 2DF2x^3132 + F4A04x^3131 + E5767x^3130 + 30D90x^3129 + B001x^3128 + 15C36x^3127 + DA4E0x^3126 + 2DB90x^3125 + 8E179x^3124 + B0A1Cx^3123 + 92681x^3122 + D16F9x^3121 + 2115Ex^3120 + 71D32x^3119 + EA719x^3118 + 2E0C0x^3117 + 9709Ex^3116 + 6BA6x^3115 + 8F5A5x^3114 + 72DC6x^3113 + 4893x^3112 + 65C23x^3111 + 70D6Cx^3110 + E6E39x^3109 + E9B71x^3108 + B77BBx^3107 + 7C24x^3106 + D12B2x^3105 + 306DFx^3104 + AD4EDx^3103 + F6863x^3102 + E1171x^3101 + 785D7x^3100 + 2A92x^3099 + 6D2C7x^3098 + 948ACx^3097 + D9764x^3096 + 611B7x^3095 + 6FF1Fx^3094 + BBFBEx^3093 + 7694Ax^3092 + 4315Fx^3091 + 16A64x^3090 + 1B35Dx^3089 + 7DAB9x^3088 + DC413x^3087 + 18C94x^3086 + ADB22x^3085 + F006Ax^3084 + 6F4AAx^3083 + 2E9AAx^3082 + F2916x^3081 + B271Ax^3080 + EB489x^3079 + 3F8C0x^3078 + 3C96x^3077 + F8C07x^3076 + 1CE49x^3075 + B5FDAx^3074 + 96BB5x^3073 + BF278x^3072 + 436C8x^3071 + 7C2A0x^3070 + 754F7x^3069 + 5E505x^3068 + DB8E2x^3067 + F30ADx^3066 + 79857x^3065 + 1821Ax^3064 + DFE69x^3063 + D8B8Bx^3062 + C971x^3061 + E834Ex^3060 + DF70x^3059 + F0FAx^3058 + BB1CBx^3057 + E55BDx^3056 + 70297x^3055 + 6BF69x^3054 + 14FD1x^3053 + D2408x^3052 + CB387x^3051 + 5306Fx^3050 + 481AFx^3049 + D9C7x^3048 + 4924Cx^3047 + 3E317x^3046 + 3F385x^3045 + E8F80x^3044 + AECA7x^3043 + 4AD5Ex^3042 + 85896x^3041 + FBEECx^3040 + D2C74x^3039 + DA9C9x^3038 + F9151x^3037 + 7217Dx^3036 + 4BD75x^3035 + 68024x^3034 + 14DFCx^3033 + DF475x^3032 + 830FAx^3031 + 775EEx^3030 + 6C6E5x^3029 + DB06Bx^3028 + 2ABB7x^3027 + 7068Cx^3026 + AD125x^3025 + A9110x^3024 + 1D41Fx^3023 + 23341x^3022 + 987E0x^3021 + DB9FBx^3020 + CFECx^3019 + 5A9DDx^3018 + E62C1x^3017 + 80B1Dx^3016 + 483D7x^3015 + 5A7Cx^3014 + A14A4x^3013 + 2C762x^3012 + 79013x^3011 + 4A429x^3010 + 70CD4x^3009 + 1A587x^3008 + 7F62Ex^3007 + 1E97Ax^3006 + 442E8x^3005 + 1230x^3004 + 571FCx^3003 + 37FF6x^3002 + BB0E8x^3001 + 61DF5x^3000 + 49EF8x^2999 + AB4DDx^2998 + 9A7FFx^2997 + 21B2Ax^2996 + BDC97x^2995 + 8F680x^2994 + B6B63x^2993 + 6F9D9x^2992 + A541Cx^2991 + 58510x^2990 + F307Bx^2989 + A3828x^2988 + E4F94x^2987 + 3F6DBx^2986 + D7A1Ax^2985 + 22A06x^2984 + 6D043x^2983 + 74983x^2982 + 664E1x^2981 + 91B17x^2980 + 21FD4x^2979 + F4438x^2978 + 37542x^2977 + ED39Fx^2976 + 362D5x^2975 + EABBCx^2974 + 3F92Dx^2973 + B8CA0x^2972 + 96E75x^2971 + 5D771x^2970 + 76226x^2969 + 51254x^2968 + B07E7x^2967 + 96BBFx^2966 + 6D62Bx^2965 + D4CA0x^2964 + 49CFx^2963 + C644Cx^2962 + 3A4AAx^2961 + EEAC4x^2960 + 12D65x^2959 + 65CBEx^2958 + 2110Ax^2957 + ECFDAx^2956 + C2268x^2955 + 63AD0x^2954 + 9C04Ex^2953 + 4CDBFx^2952 + 9556x^2951 + 1837Ex^2950 + 2F3CEx^2949 + B8921x^2948 + AEF15x^2947 + 9D0C5x^2946 + 44DC1x^2945 + 5A4BEx^2944 + 7F0E0x^2943 + A1C66x^2942 + 8CF93x^2941 + D6BE1x^2940 + 8B1A7x^2939 + 40EFx^2938 + AA3EBx^2937 + C337Dx^2936 + 37CBCx^2935 + 8D439x^2934 + 9CD98x^2933 + 25FE1x^2932 + B473Cx^2931 + 3D2A9x^2930 + 8F1EBx^2929 + AF4Dx^2928 + D8056x^2927 + EFDCFx^2926 + 9FC2Bx^2925 + F70C5x^2924 + F1367x^2923 + 67E0Dx^2922 + 458CBx^2921 + 378CEx^2920 + AC355x^2919 + 3863Ex^2918 + F67B2x^2917 + B24ADx^2916 + F0C48x^2915 + F5804x^2914 + 7D7F1x^2913 + 774Cx^2912 + F6547x^2911 + 44074x^2910 + BAAC2x^2909 + 984BDx^2908 + 727CBx^2907 + DCF8Bx^2906 + 214AFx^2905 + 71A4Dx^2904 + 1188x^2903 + 7794Ex^2902 + 2E12Fx^2901 + 6BCF5x^2900 + 48412x^2899 + DE6B6x^2898 + 83CA6x^2897 + E6460x^2896 + A3196x^2895 + 496Dx^2894 + 3ED14x^2893 + DB626x^2892 + 56AB8x^2891 + 74A20x^2890 + 74Dx^2889 + 7CE94x^2888 + 7533Dx^2887 + 7A561x^2886 + 5ED56x^2885 + 44B35x^2884 + F6189x^2883 + D74A4x^2882 + D8015x^2881 + 937EAx^2880 + 8C303x^2879 + 488E6x^2878 + 1EE0Dx^2877 + E2BFBx^2876 + 6B8CDx^2875 + 41F95x^2874 + 86CBEx^2873 + 36530x^2872 + E61E8x^2871 + E9A3Cx^2870 + EE864x^2869 + A6AFFx^2868 + E5769x^2867 + 596A0x^2866 + C9588x^2865 + 3C513x^2864 + BC53Ax^2863 + B0656x^2862 + 7F533x^2861 + 12DEx^2860 + F3820x^2859 + 3A077x^2858 + 553C1x^2857 + 3FE3Fx^2856 + 6133Ax^2855 + B2307x^2854 + 2CA79x^2853 + AA732x^2852 + ED185x^2851 + E3942x^2850 + 67B20x^2849 + 64743x^2848 + F6C22x^2847 + D3C10x^2846 + 33AC0x^2845 + A5269x^2844 + CE900x^2843 + B6239x^2842 + 5FE71x^2841 + 2E12Dx^2840 + D10E8x^2839 + 8909Fx^2838 + 895Fx^2837 + AB8Dx^2836 + D3751x^2835 + CD280x^2834 + 7CF0Ex^2833 + EE687x^2832 + 98D48x^2831 + DCFFCx^2830 + A171Ax^2829 + 5B92x^2828 + 9D89Ex^2827 + 99B3Fx^2826 + 4A5E8x^2825 + E5D19x^2824 + 4A8EAx^2823 + 3B0C3x^2822 + 5BDABx^2821 + 8DEF2x^2820 + B2AC2x^2819 + EE0DAx^2818 + D26Bx^2817 + CE25Cx^2816 + BE753x^2815 + 63CC2x^2814 + 8654Bx^2813 + 1118Cx^2812 + A5125x^2811 + 3AF26x^2810 + 83765x^2809 + EA2EDx^2808 + EC9EEx^2807 + EC741x^2806 + 8E535x^2805 + 4A7E7x^2804 + 60692x^2803 + C9D5Fx^2802 + 227D4x^2801 + 8369Ax^2800 + 48705x^2799 + 8363Fx^2798 + AAA8Ax^2797 + 64649x^2796 + 2E4F3x^2795 + F8C96x^2794 + 28FE1x^2793 + A7678x^2792 + 6BC11x^2791 + 4933Bx^2790 + A3103x^2789 + 3D632x^2788 + 7ABB4x^2787 + C8F92x^2786 + 5D092x^2785 + E5E7Ex^2784 + D13E1x^2783 + 78A5x^2782 + 8B354x^2781 + 7E6CDx^2780 + 9B3BFx^2779 + 3434Bx^2778 + BF78Ex^2777 + BEC8Fx^2776 + 95C6Fx^2775 + 559F6x^2774 + 626F4x^2773 + 93299x^2772 + C467Cx^2771 + 90A69x^2770 + D124Ex^2769 + 3ADBDx^2768 + C7A7Fx^2767 + 7AFEDx^2766 + B1801x^2765 + 11C84x^2764 + 7B222x^2763 + 6C33Cx^2762 + 7E244x^2761 + 30724x^2760 + 39194x^2759 + 8E3EDx^2758 + 599F4x^2757 + E5B45x^2756 + ED60Cx^2755 + DFC90x^2754 + 2B09Dx^2753 + 8E837x^2752 + 6865Cx^2751 + 3E2C5x^2750 + 5A9CFx^2749 + 3C30Cx^2748 + A056Dx^2747 + 78209x^2746 + 7D5B0x^2745 + DCF4Cx^2744 + 25263x^2743 + 51640x^2742 + 22BEDx^2741 + DE304x^2740 + 771BBx^2739 + DE050x^2738 + 4F53Fx^2737 + 9EBBFx^2736 + BA5Cx^2735 + 40665x^2734 + 3272Fx^2733 + 3160Fx^2732 + 517DBx^2731 + 14F3Fx^2730 + B9C4Dx^2729 + 6D35Ax^2728 + F67C1x^2727 + CADCCx^2726 + 48933x^2725 + 97FD1x^2724 + 14DBBx^2723 + DC625x^2722 + 75831x^2721 + 2D53x^2720 + 78BE2x^2719 + 54513x^2718 + 13EC8x^2717 + 962E9x^2716 + 6B49Ex^2715 + D835Dx^2714 + 5C89Ex^2713 + 10804x^2712 + BC2D8x^2711 + 6C99Bx^2710 + 83D0Fx^2709 + B475Ex^2708 + B0BE3x^2707 + 493E2x^2706 + 5DD19x^2705 + 13844x^2704 + 70E0Cx^2703 + 689EAx^2702 + 35146x^2701 + D10BDx^2700 + F7AB6x^2699 + 6D279x^2698 + 6762Bx^2697 + 17170x^2696 + 12BE2x^2695 + DD7Bx^2694 + D88ADx^2693 + B24AEx^2692 + 421E1x^2691 + 2AD1Ex^2690 + B6F4Ex^2689 + 661C2x^2688 + EC4E9x^2687 + BAE72x^2686 + 8A713x^2685 + 47105x^2684 + D1EF1x^2683 + 6E29Ex^2682 + EA6FEx^2681 + E20FEx^2680 + 512B1x^2679 + 1B8DEx^2678 + 1AA70x^2677 + 51B30x^2676 + 97565x^2675 + 74B32x^2674 + F0327x^2673 + 406B8x^2672 + 2B19Bx^2671 + D6DE4x^2670 + B90E6x^2669 + 33F93x^2668 + 896EBx^2667 + B5932x^2666 + 31D55x^2665 + 5D8A8x^2664 + 51001x^2663 + 769E1x^2662 + 5F455x^2661 + 6A4D0x^2660 + 651A5x^2659 + D782Cx^2658 + E1420x^2657 + 71B75x^2656 + 69100x^2655 + C7D8Dx^2654 + 11645x^2653 + 34CF8x^2652 + B8D33x^2651 + C81E6x^2650 + 240F4x^2649 + EDE2Cx^2648 + AEEB7x^2647 + 20F80x^2646 + 833B4x^2645 + 54979x^2644 + 75BE1x^2643 + 67A4Ex^2642 + E701Fx^2641 + E1AFFx^2640 + BDC53x^2639 + E88ECx^2638 + 7871Dx^2637 + 8CEBEx^2636 + F6A3Ex^2635 + C5835x^2634 + 639ECx^2633 + E96D8x^2632 + 63E3Cx^2631 + 54311x^2630 + C1B5Bx^2629 + 1BA55x^2628 + 79A4x^2627 + F6A12x^2626 + E98F2x^2625 + 535FBx^2624 + 50DEEx^2623 + B8D42x^2622 + 6877Fx^2621 + E371Cx^2620 + 93633x^2619 + 78A4Ax^2618 + 93AA8x^2617 + 798ECx^2616 + E5074x^2615 + 2015Bx^2614 + 8C14Fx^2613 + 28979x^2612 + BC4D1x^2611 + A10B9x^2610 + 5BC01x^2609 + CA5B9x^2608 + 1B49x^2607 + 3ACB0x^2606 + E0CD5x^2605 + 76907x^2604 + 33E0Dx^2603 + 5D84Dx^2602 + D8AABx^2601 + A340Ax^2600 + 6E3BAx^2599 + 379A9x^2598 + 8BA0Ax^2597 + 43941x^2596 + 22C49x^2595 + A3159x^2594 + ED611x^2593 + F0A08x^2592 + 9199Cx^2591 + A90DEx^2590 + 2336x^2589 + B5072x^2588 + 75A03x^2587 + D9DF8x^2586 + 28F0Dx^2585 + A4719x^2584 + 1F976x^2583 + B821Fx^2582 + 99B96x^2581 + A6B38x^2580 + D9E0Ex^2579 + 39707x^2578 + C0D2Bx^2577 + B8521x^2576 + 32D97x^2575 + DBAE2x^2574 + CF899x^2573 + 71F25x^2572 + 36FB2x^2571 + B24C6x^2570 + E8880x^2569 + 2C92Cx^2568 + 57E7Dx^2567 + 5BF32x^2566 + 25A33x^2565 + 22050x^2564 + 3C55Bx^2563 + 9B019x^2562 + 4D4C3x^2561 + 81D50x^2560 + E9927x^2559 + 38537x^2558 + CEE24x^2557 + 6024Dx^2556 + D76D5x^2555 + A57B7x^2554 + 90AC2x^2553 + 5726Fx^2552 + DF4D6x^2551 + B5864x^2550 + F2FE3x^2549 + 365CCx^2548 + D8B8Ex^2547 + B678Fx^2546 + 7A3C8x^2545 + E14BAx^2544 + 83186x^2543 + 5897x^2542 + 92B63x^2541 + 183EFx^2540 + 9EAE0x^2539 + 985E2x^2538 + D1AC7x^2537 + 75991x^2536 + 5EE9x^2535 + A1F33x^2534 + 9013Fx^2533 + 6E3D4x^2532 + AED8Dx^2531 + 29A81x^2530 + 249CBx^2529 + AA0E7x^2528 + 7BDE1x^2527 + 2538Ax^2526 + F86BBx^2525 + 59DD5x^2524 + DE701x^2523 + 3BB30x^2522 + A04ABx^2521 + 9759Ex^2520 + 403C0x^2519 + B892Fx^2518 + 32C93x^2517 + 82C18x^2516 + B2153x^2515 + 1E76Bx^2514 + 8B92Dx^2513 + 1A990x^2512 + AD65Ax^2511 + 3C41Cx^2510 + A426x^2509 + 54398x^2508 + 99DCEx^2507 + 1F991x^2506 + DF807x^2505 + 28C08x^2504 + 742DDx^2503 + F2CFCx^2502 + 4A9C4x^2501 + D05A8x^2500 + 3B96Ax^2499 + 8A079x^2498 + 2AF02x^2497 + 98986x^2496 + 4BE05x^2495 + FA826x^2494 + 1FFEDx^2493 + 3F8FCx^2492 + C6927x^2491 + 21DF0x^2490 + F25F7x^2489 + 4443x^2488 + 66F14x^2487 + F0C05x^2486 + E47ACx^2485 + 1D9D7x^2484 + 3146Bx^2483 + 22E83x^2482 + 2D34Ex^2481 + 3B78x^2480 + 7D716x^2479 + 227BAx^2478 + 86ED9x^2477 + D33DAx^2476 + F6E34x^2475 + BC168x^2474 + 3AF3Ex^2473 + 5EB67x^2472 + 6270x^2471 + 239E8x^2470 + 54709x^2469 + C7831x^2468 + C4C3Ex^2467 + 73D41x^2466 + AE5CBx^2465 + 671F8x^2464 + BD1FFx^2463 + 683F4x^2462 + 18077x^2461 + 1D2E0x^2460 + 4A827x^2459 + 8A5CAx^2458 + 2C625x^2457 + AB0AEx^2456 + 1714Cx^2455 + 3AD3Dx^2454 + B7AD6x^2453 + A9ECFx^2452 + F5B09x^2451 + 925AFx^2450 + 42261x^2449 + 25D4Ax^2448 + E8DB9x^2447 + 80DA1x^2446 + EA0D4x^2445 + 1B6A2x^2444 + BC5AEx^2443 + FA25Bx^2442 + 5018Ex^2441 + 787ACx^2440 + 6606Bx^2439 + DA135x^2438 + 1F2CEx^2437 + EFCCDx^2436 + 63223x^2435 + B29B5x^2434 + E1C59x^2433 + 564A8x^2432 + B7C9Dx^2431 + 13998x^2430 + 54025x^2429 + A4D66x^2428 + 8B6D3x^2427 + 42445x^2426 + C268Ax^2425 + A51D2x^2424 + D02BAx^2423 + 211C5x^2422 + 4A5A6x^2421 + 4C5A5x^2420 + DEE06x^2419 + 5F994x^2418 + E576Cx^2417 + C57FFx^2416 + FB50x^2415 + B3E81x^2414 + 6AE56x^2413 + D3E13x^2412 + BEF20x^2411 + AEFC3x^2410 + C6238x^2409 + CC062x^2408 + 7199Ax^2407 + 4A293x^2406 + 48E84x^2405 + 8D762x^2404 + 20E6x^2403 + 7C853x^2402 + C819Ax^2401 + 275EFx^2400 + BE814x^2399 + 67910x^2398 + 3B50Bx^2397 + BF10Cx^2396 + BA033x^2395 + F1989x^2394 + ABA79x^2393 + 47F7Ex^2392 + F0662x^2391 + C94D3x^2390 + F2DD7x^2389 + FBDD1x^2388 + A91EDx^2387 + 1DB25x^2386 + D0D68x^2385 + 601CDx^2384 + 6B126x^2383 + 324A6x^2382 + 11882x^2381 + 229D5x^2380 + 2A8E9x^2379 + B9804x^2378 + BE475x^2377 + 8582Bx^2376 + 5F102x^2375 + F9B0Ex^2374 + D1DE5x^2373 + 5B637x^2372 + B795Ax^2371 + 9FCBBx^2370 + 24434x^2369 + 7EE8Ex^2368 + 3529x^2367 + E112Bx^2366 + 6F6AFx^2365 + 91296x^2364 + 3658Cx^2363 + 94FDFx^2362 + A780Dx^2361 + 7D90Fx^2360 + 1CEE3x^2359 + 5EDD5x^2358 + BB28Ax^2357 + B5B4Ax^2356 + 685EEx^2355 + 406C1x^2354 + CF0C1x^2353 + 56A76x^2352 + 28Fx^2351 + 53327x^2350 + 82FE5x^2349 + BB8A2x^2348 + 339C4x^2347 + 4EA6Bx^2346 + D1D11x^2345 + 35172x^2344 + 73EC6x^2343 + BF3C2x^2342 + 266C2x^2341 + E13AAx^2340 + F0F1x^2339 + 42F00x^2338 + D628Dx^2337 + 8B0BEx^2336 + 3A013x^2335 + 30860x^2334 + B56D6x^2333 + 19D68x^2332 + ADB24x^2331 + D1158x^2330 + A0D8Bx^2329 + 2E52Fx^2328 + 19E29x^2327 + 9054Cx^2326 + C261Ex^2325 + 4712Cx^2324 + 22244x^2323 + 151EFx^2322 + 35F7Ex^2321 + A5FAFx^2320 + 7C49x^2319 + 799F1x^2318 + 8F897x^2317 + 4BFFBx^2316 + F286x^2315 + 834Ax^2314 + 981A9x^2313 + 8C67Cx^2312 + CC835x^2311 + E9130x^2310 + 23841x^2309 + 7925Dx^2308 + 2DD99x^2307 + B1E2Bx^2306 + C06x^2305 + D8231x^2304 + 8316Ax^2303 + 5553Fx^2302 + 58CE7x^2301 + 62D75x^2300 + 284C7x^2299 + 574Fx^2298 + B78FFx^2297 + F921Ex^2296 + 25086x^2295 + 53D9Ex^2294 + 4BA53x^2293 + 6070Ex^2292 + EC651x^2291 + 8C07x^2290 + C54Bx^2289 + 5B732x^2288 + CB818x^2287 + CB2A1x^2286 + 7E541x^2285 + 2BF52x^2284 + DDFA0x^2283 + 61BB5x^2282 + 379BBx^2281 + 6B95x^2280 + 5E6D8x^2279 + D92EEx^2278 + EC32Dx^2277 + 95EB3x^2276 + C53FFx^2275 + 385A6x^2274 + 747C1x^2273 + 54346x^2272 + CC3A2x^2271 + DFA1Bx^2270 + 50E5Ax^2269 + 2E3AAx^2268 + 30907x^2267 + 683DDx^2266 + 59507x^2265 + 3BB45x^2264 + 70474x^2263 + 4461Fx^2262 + 841Bx^2261 + F1954x^2260 + 80933x^2259 + 1F38Ex^2258 + 5CBBx^2257 + 21052x^2256 + 62190x^2255 + E89F7x^2254 + A17A7x^2253 + DFAEEx^2252 + AB7A7x^2251 + 8300Ax^2250 + 8A20x^2249 + 7AF88x^2248 + F2F72x^2247 + A0DA6x^2246 + F875Ax^2245 + 6280Bx^2244 + 7578x^2243 + A54Dx^2242 + 8350Fx^2241 + 52A7x^2240 + 6AE16x^2239 + 23CC0x^2238 + 8E92Ex^2237 + 458x^2236 + B7A75x^2235 + E198Dx^2234 + C23E9x^2233 + 99F9Cx^2232 + 438C4x^2231 + A1B6Cx^2230 + B1F50x^2229 + 7DE08x^2228 + A463Dx^2227 + 7B0A7x^2226 + A2F9Ex^2225 + ECF1x^2224 + BFBDEx^2223 + 39200x^2222 + D29BBx^2221 + 92202x^2220 + A3FAx^2219 + 560A2x^2218 + CDDA9x^2217 + 6E3D2x^2216 + 60D32x^2215 + D4328x^2214 + 622E9x^2213 + 43329x^2212 + BA4CAx^2211 + 57EA1x^2210 + B4Dx^2209 + A13F0x^2208 + 6772Bx^2207 + 337DEx^2206 + A6BEEx^2205 + 7E63Ax^2204 + B89C5x^2203 + 16C41x^2202 + DB19Dx^2201 + 51C8Ax^2200 + 6B2D5x^2199 + 4F1AFx^2198 + D96A6x^2197 + 7DE56x^2196 + 48531x^2195 + 896DBx^2194 + A65F8x^2193 + 859BEx^2192 + CACB1x^2191 + 5C718x^2190 + 69D1Ex^2189 + F6940x^2188 + A82F0x^2187 + D70E9x^2186 + 37C98x^2185 + E1A44x^2184 + 3EB02x^2183 + 28B5Ex^2182 + 2ABC7x^2181 + A335Ex^2180 + C8D0Dx^2179 + 4AC17x^2178 + E03DDx^2177 + B7610x^2176 + DFF10x^2175 + 86B88x^2174 + 5D39Bx^2173 + 5D586x^2172 + 71502x^2171 + 9B62Cx^2170 + 763EFx^2169 + D8368x^2168 + C4C6Fx^2167 + AB32Bx^2166 + 89E17x^2165 + 623B8x^2164 + 1AB4Dx^2163 + 3180Bx^2162 + 98957x^2161 + E28E4x^2160 + 4D0D5x^2159 + 342A5x^2158 + 5F0E7x^2157 + F25EDx^2156 + BD241x^2155 + 722Fx^2154 + CC34x^2153 + AD7D0x^2152 + F82Fx^2151 + 6B465x^2150 + FB130x^2149 + EB251x^2148 + E3A4Cx^2147 + 7A9B3x^2146 + D21A9x^2145 + 3BD65x^2144 + A379Fx^2143 + EB885x^2142 + 825F9x^2141 + 1D6C9x^2140 + 1324Cx^2139 + 3C5ECx^2138 + 2A05x^2137 + C699Bx^2136 + A2FFDx^2135 + BED61x^2134 + 5D78Ax^2133 + 51733x^2132 + 82F69x^2131 + 4B4E1x^2130 + C7258x^2129 + 5A40Cx^2128 + CEE98x^2127 + F7441x^2126 + 54AF8x^2125 + 12525x^2124 + 16E52x^2123 + E7564x^2122 + 9AE30x^2121 + 542B3x^2120 + CE663x^2119 + 3CA72x^2118 + 3FB36x^2117 + F9968x^2116 + D40F6x^2115 + D64C1x^2114 + 931F5x^2113 + 79F95x^2112 + CAAA5x^2111 + E48B1x^2110 + A2EC8x^2109 + 5EFC1x^2108 + CB3A5x^2107 + 2D028x^2106 + 99B48x^2105 + 16B32x^2104 + 13FDx^2103 + A416Dx^2102 + 190E7x^2101 + 69803x^2100 + 8ACE0x^2099 + 6A546x^2098 + 80A76x^2097 + F4567x^2096 + A938Fx^2095 + 5976Ex^2094 + 77BA6x^2093 + 1CF98x^2092 + 6AFB8x^2091 + C3A81x^2090 + 64D12x^2089 + BB425x^2088 + B2F30x^2087 + BD5C5x^2086 + 9E1F3x^2085 + EDFCx^2084 + 60965x^2083 + B5FFDx^2082 + B1514x^2081 + FB32Fx^2080 + 81FBEx^2079 + 9C262x^2078 + B8450x^2077 + CEDF5x^2076 + 92FAFx^2075 + 5037Ex^2074 + F65CAx^2073 + 3865Dx^2072 + E438Dx^2071 + B265Cx^2070 + 8F5E9x^2069 + 4600Bx^2068 + AEE2Bx^2067 + 2687Ax^2066 + 78B56x^2065 + 3FA4Ax^2064 + 37B8Fx^2063 + B264Bx^2062 + 56906x^2061 + 2E7D3x^2060 + 789AEx^2059 + 6AB89x^2058 + 9010Fx^2057 + AA009x^2056 + 1675x^2055 + 4BC33x^2054 + 46D95x^2053 + E4A84x^2052 + E02C2x^2051 + 34791x^2050 + 4680Ex^2049 + B57F3x^2047 + C7870x^2046 + 1BD3Fx^2045 + 1757Dx^2044 + B526Cx^2043 + B03CEx^2042 + FA98Cx^2041 + 51FF8x^2040 + 6BEF2x^2039 + 91478x^2038 + 83653x^2037 + CD82Ex^2036 + A56FBx^2035 + 499B6x^2034 + C4472x^2033 + BC5B7x^2032 + 834ABx^2031 + D5787x^2030 + 4D1D6x^2029 + B5FF6x^2028 + 6CA18x^2027 + 499A5x^2026 + 17C74x^2025 + C39A4x^2024 + 5A37x^2023 + ABC83x^2022 + 69052x^2021 + 2D20Cx^2020 + 43BB1x^2019 + 5FD9Fx^2018 + 7A043x^2017 + CD2x^2016 + 4AAEDx^2015 + 46004x^2014 + 9B69Cx^2013 + ED205x^2012 + 5DE0Ex^2011 + 3EA3Cx^2010 + 490D1x^2009 + 40BDCx^2008 + 972EFx^2007 + 38580x^2006 + 91049x^2005 + DF069x^2004 + 8445Bx^2003 + A2893x^2002 + 52C72x^2001 + 7A9Ax^2000 + 7B58Bx^1999 + 91ABBx^1998 + 71321x^1997 + 927FEx^1996 + E2F1Ax^1995 + 57E94x^1994 + FAC04x^1993 + E54CFx^1992 + 624B9x^1991 + CEFD9x^1990 + 30C5Cx^1989 + 9D040x^1988 + 59139x^1987 + 17750x^1986 + 3155Cx^1985 + 8206Cx^1984 + 68E0Cx^1983 + 25B40x^1982 + 27F0Bx^1981 + 2699x^1980 + BC4CBx^1979 + BF58Fx^1978 + 2D99Ex^1977 + A7D4Ex^1976 + 611D1x^1975 + 14A9Dx^1974 + E51AFx^1973 + E9ADCx^1972 + A7509x^1971 + 4BC0x^1970 + 2D169x^1969 + A1BF5x^1968 + 34DA9x^1967 + B0B20x^1966 + 79098x^1965 + AA8CEx^1964 + 9E877x^1963 + 3D2A0x^1962 + 59004x^1961 + 35666x^1960 + F95FCx^1959 + BFA15x^1958 + E8DB5x^1957 + DE938x^1956 + 79A08x^1955 + 1077Cx^1954 + 58862x^1953 + C029Cx^1952 + 29E58x^1951 + 8164Ex^1950 + 185B5x^1949 + 10DB0x^1948 + ED1x^1947 + 90B9Cx^1946 + EC7D2x^1945 + 4E831x^1944 + EF3CDx^1943 + F4DD2x^1942 + 3EDC0x^1941 + 9A14x^1940 + 9CF1Ax^1939 + C7D5Cx^1938 + AEF2Cx^1937 + 1971Dx^1936 + 636AAx^1935 + CA7F6x^1934 + E14B4x^1933 + 99C49x^1932 + 721EAx^1931 + 50CD6x^1930 + 37392x^1929 + 23C99x^1928 + 85C12x^1927 + 609D5x^1926 + 8AAFFx^1925 + 9EA7Bx^1924 + 9EC66x^1923 + 75479x^1922 + 1C0F1x^1921 + 449F1x^1920 + 1BC24x^1919 + B13EAx^1918 + 332F4x^1917 + 58CA3x^1916 + D143Ax^1915 + D34A3x^1914 + BD4FFx^1913 + 1A5BDx^1912 + C4369x^1911 + 24F18x^1910 + 53D11x^1909 + 56C1x^1908 + 922E3x^1907 + 9F8E9x^1906 + 31350x^1905 + 76643x^1904 + 55A09x^1903 + 72926x^1902 + B3AD0x^1901 + 7E1ABx^1900 + 2295Bx^1899 + ACE52x^1898 + 90D2Cx^1897 + AA377x^1896 + 20E64x^1895 + E53C0x^1894 + 4363Cx^1893 + 7D9C7x^1892 + 55413x^1891 + C8823x^1890 + 948D6x^1889 + 5AC11x^1888 + FB4B4x^1887 + A4160x^1886 + 41B37x^1885 + B8CD8x^1884 + 99D18x^1883 + 27CD9x^1882 + 9B2CFx^1881 + 8DC2Fx^1880 + 2E258x^1879 + A5F5Fx^1878 + F1C07x^1877 + 69DFFx^1876 + 29646x^1875 + C2E01x^1874 + 3C423x^1873 + ED310x^1872 + 59063x^1871 + 80F5Ax^1870 + 579C4x^1869 + 7E1F9x^1868 + 4A0B1x^1867 + 5A495x^1866 + B873Dx^1865 + 62065x^1864 + 39C18x^1863 + 1A674x^1862 + 4458Cx^1861 + FBBA9x^1860 + 6D6D3x^1859 + D8341x^1858 + 911EBx^1857 + F6D5Ax^1856 + 78AF2x^1855 + F1AB4x^1854 + F4A89x^1853 + 997F6x^1852 + 38A7x^1851 + 5B25Bx^1850 + 908Fx^1849 + 81079x^1848 + F35E1x^1847 + 78FF7x^1846 + 5085Ax^1845 + 1C513x^1844 + 5A85Ax^1843 + 1360Ax^1842 + 99E71x^1841 + DAFAFx^1840 + F6346x^1839 + DCC73x^1838 + 7B6CEx^1837 + A6ADx^1836 + F3BE6x^1835 + B79E2x^1834 + 8BB8Dx^1833 + C04BCx^1832 + A2AFAx^1831 + 93C24x^1830 + CB6FAx^1829 + CDC57x^1828 + AB1A7x^1827 + 1C5E6x^1826 + 2FC5Fx^1825 + A7CBBx^1824 + 87840x^1823 + C3A5Bx^1822 + 36C02x^1821 + 6614Ex^1820 + FCD4x^1819 + 22D13x^1818 + 9D929x^1817 + F546Cx^1816 + C4646x^1815 + 9A44Cx^1814 + 1E061x^1813 + D00AFx^1812 + 7DAC0x^1811 + 30D60x^1810 + 307E9x^1809 + A08CFx^1808 + EFAB6x^1807 + F33FAx^1806 + F9B0x^1805 + 9B8F3x^1804 + B05AEx^1803 + A8263x^1802 + D6F7Bx^1801 + 2DE3x^1800 + 44702x^1799 + F68B2x^1798 + D3B3Ax^1797 + 9928Cx^1796 + A331Ax^1795 + A6AC2x^1794 + 78E97x^1793 + 23DD0x^1792 + FB3FBx^1791 + 4A1D6x^1790 + CE268x^1789 + 82DA4x^1788 + D87C0x^1787 + 12ED1x^1786 + 2F7CCx^1785 + 6F985x^1784 + 63E58x^1783 + F3CB7x^1782 + ECD7Bx^1781 + B0006x^1780 + 6C76Ax^1779 + 82610x^1778 + F43B8x^1777 + 56052x^1776 + C6083x^1775 + E6E12x^1774 + D9DBDx^1773 + B4ED5x^1772 + 399E3x^1771 + 6BAB5x^1770 + E21D8x^1769 + CDAD2x^1768 + 5B276x^1767 + 2AEA9x^1766 + 4E4DDx^1765 + E2299x^1764 + 4692Bx^1763 + CB7A1x^1762 + C1FEEx^1761 + 70F43x^1760 + 25D74x^1759 + B9101x^1758 + ECF10x^1757 + 1AC57x^1756 + D593Fx^1755 + 3CC3Fx^1754 + 8813Bx^1753 + C6E8Fx^1752 + 2A2F0x^1751 + AD596x^1750 + C863Dx^1749 + 4075Fx^1748 + 7901Cx^1747 + A8CDAx^1746 + FBD72x^1745 + A558Bx^1744 + 2CF40x^1743 + BB940x^1742 + 93A13x^1741 + 464B7x^1740 + 40D77x^1739 + 9D22Cx^1738 + DF11Ex^1737 + 7E6F2x^1736 + 547F4x^1735 + 67022x^1734 + C5A75x^1733 + 6AD6Bx^1732 + 8C952x^1731 + 1AED6x^1730 + F8AD8x^1729 + 7D173x^1728 + D7BCDx^1727 + 5C346x^1726 + 446A7x^1725 + A09CAx^1724 + 2A21Cx^1723 + 24F3x^1722 + 9CEFFx^1721 + 767D6x^1720 + 3DB8Cx^1719 + 427FDx^1718 + D1718x^1717 + D962Cx^1716 + EA77Fx^1715 + C9B5Bx^1714 + 90EDBx^1713 + 9BE34x^1712 + 2B299x^1711 + DE4DCx^1710 + 52E14x^1709 + 230x^1708 + 922Ax^1707 + 32B2Ex^1706 + B99Fx^1705 + B4083x^1704 + 50588x^1703 + A678x^1702 + 41FCEx^1701 + 3CEF5x^1700 + C0AF6x^1699 + 946F1x^1698 + 3D7EDx^1697 + D4A12x^1696 + 33E67x^1695 + 7F7AEx^1694 + F9F1Bx^1693 + 6E89Fx^1692 + B317Dx^1691 + B1D6Ex^1690 + 8A667x^1689 + 2FF9Fx^1688 + 35DC9x^1687 + 4D03Ex^1686 + 3D0E1x^1685 + 281EEx^1684 + 911ABx^1683 + 48180x^1682 + EC4B1x^1681 + 36802x^1680 + 16895x^1679 + 9C66Dx^1678 + 1D1FBx^1677 + AFA5Cx^1676 + B1A5Bx^1675 + DAE3Cx^1674 + 2BD47x^1673 + 56E2Fx^1672 + 39977x^1671 + B9BBCx^1670 + 7092Ex^1669 + 5729Bx^1668 + A7FDCx^1667 + E8669x^1666 + 44364x^1665 + A5B59x^1664 + 1A3A8x^1663 + 4964Cx^1662 + 98DDEx^1661 + C334x^1660 + DCD33x^1659 + 21ECCx^1658 + 95F96x^1657 + 83855x^1656 + ABE73x^1655 + 1DA6x^1654 + 3FA53x^1653 + E095Fx^1652 + 11F2Dx^1651 + 7B260x^1650 + 13248x^1649 + D62B7x^1648 + B9DA0x^1647 + 69A52x^1646 + 64F8x^1645 + 52132x^1644 + 4452Bx^1643 + C12C4x^1642 + E4EB5x^1641 + 50F53x^1640 + CF9DCx^1639 + 71A37x^1638 + B17DAx^1637 + DED21x^1636 + E3F8Ax^1635 + 93C0Dx^1634 + 3EE02x^1633 + 94E09x^1632 + 4DA36x^1631 + 882C0x^1630 + 373C3x^1629 + 347D0x^1628 + A78F8x^1627 + D8619x^1626 + F5D91x^1625 + 9D49Ax^1624 + C10C3x^1623 + 3FE99x^1622 + 51CDx^1621 + 28C27x^1620 + 75128x^1619 + D9847x^1618 + 7E8EBx^1617 + F8489x^1616 + CECB3x^1615 + D917Ex^1614 + CAB96x^1613 + DE62Ax^1612 + 17855x^1611 + B3FCx^1610 + 950EDx^1609 + F7BBEx^1608 + 9A0Ax^1607 + DA211x^1606 + 356DAx^1605 + BC705x^1604 + DC014x^1603 + 17DBx^1602 + B01FCx^1601 + 6367Bx^1600 + D10FFx^1599 + 71F88x^1598 + C0697x^1597 + 2BA59x^1596 + B163Dx^1595 + 9305x^1594 + 87D24x^1593 + D33F9x^1592 + 1C7FAx^1591 + DC670x^1590 + 62233x^1589 + A7C69x^1588 + F1BDBx^1587 + BFBE5x^1586 + 4E9A7x^1585 + E1671x^1584 + 706D4x^1583 + DD896x^1582 + 49EAEx^1581 + 793E9x^1580 + C936Ex^1579 + 436D2x^1578 + BBC41x^1577 + 64A63x^1576 + 5BB56x^1575 + C04D1x^1574 + 1D900x^1573 + A222Cx^1572 + 3946x^1571 + D6C77x^1570 + 80220x^1569 + 51F1Ax^1568 + D7636x^1567 + D2580x^1566 + 4D274x^1565 + 8DC2Dx^1564 + 6BEC2x^1563 + 5A0CEx^1562 + F6118x^1561 + 86670x^1560 + 2A53Ax^1559 + 63A1Fx^1558 + 5D521x^1557 + E3C12x^1556 + 6949Ex^1555 + F676Ax^1554 + 78E7Bx^1553 + 1AB47x^1552 + 81C39x^1551 + 45872x^1550 + 23473x^1549 + C5A35x^1548 + 901Ex^1547 + 4679Dx^1546 + 1CB2Bx^1545 + A4D92x^1544 + 6B53Fx^1543 + 5684Ax^1542 + 2492Cx^1541 + 9BDB4x^1540 + 2D1DDx^1539 + C3ACAx^1538 + 126DAx^1537 + 7A2B1x^1536 + AEB3Ex^1535 + 60FE8x^1534 + BFAA6x^1533 + D9FB1x^1532 + D65CEx^1531 + A00CFx^1530 + A4184x^1529 + CF6D5x^1528 + 13781x^1527 + 49B3Bx^1526 + C504Fx^1525 + 8A0DCx^1524 + 2C768x^1523 + 2051Fx^1522 + C926Ax^1521 + 43AE0x^1520 + 3B2D6x^1519 + C28FAx^1518 + 221F3x^1517 + 554C9x^1516 + 6246Bx^1515 + 43DE2x^1514 + DC68Bx^1513 + 578E8x^1512 + D30F4x^1511 + 22209x^1510 + 865FEx^1509 + 46F8Fx^1508 + F9CCBx^1507 + 52F23x^1506 + 6A665x^1505 + B5F9x^1504 + E9F0x^1503 + 58EA8x^1502 + D93B8x^1501 + B86C0x^1500 + 705F7x^1499 + C4658x^1498 + 8DC47x^1497 + 58BF7x^1496 + 23556x^1495 + 9E7B4x^1494 + C81F4x^1493 + 856FAx^1492 + 1B32Cx^1491 + C1351x^1490 + FA4B8x^1489 + 31A48x^1488 + A0400x^1487 + 5AF48x^1486 + 3FB30x^1485 + D3688x^1484 + 6FEB2x^1483 + DBEA6x^1482 + 16F8Dx^1481 + 82715x^1480 + 68559x^1479 + 835B7x^1478 + 689CEx^1477 + 188E5x^1476 + 93882x^1475 + 432BFx^1474 + AB213x^1473 + A8A06x^1472 + 1270Fx^1471 + 55EFx^1470 + F465Dx^1469 + E05ACx^1468 + 3A4A6x^1467 + A7CF0x^1466 + 981C5x^1465 + 12929x^1464 + 98615x^1463 + 367CCx^1462 + 55C3x^1461 + 6F143x^1460 + 838E4x^1459 + 13715x^1458 + 3E3AEx^1457 + 1A502x^1456 + 14FE2x^1455 + 945B3x^1454 + 86420x^1453 + A7688x^1452 + 78C4Dx^1451 + DB081x^1450 + 4D14Ax^1449 + E1D5x^1448 + D7F0Dx^1447 + 33E1Bx^1446 + 432CEx^1445 + C7309x^1444 + EA9BCx^1443 + 34274x^1442 + 92F01x^1441 + 8A48Cx^1440 + 1ABE1x^1439 + 247D5x^1438 + 96E5Cx^1437 + 91B31x^1436 + 9CBACx^1435 + 85620x^1434 + AB000x^1433 + 9E759x^1432 + CA2ACx^1431 + 466CFx^1430 + 72916x^1429 + C806Ex^1428 + 42F1Bx^1427 + 2521Dx^1426 + D0E66x^1425 + BB949x^1424 + BCDAx^1423 + 874CFx^1422 + 64A9Cx^1421 + AA4D1x^1420 + E1591x^1419 + E0723x^1418 + AAD50x^1417 + 19F03x^1416 + 11903x^1415 + 8DD63x^1414 + 2A110x^1413 + B4EFCx^1412 + 718EEx^1411 + 4118Fx^1410 + FB18x^1409 + 95E3Fx^1408 + 450B3x^1407 + D12E3x^1406 + B9E20x^1405 + 49B53x^1404 + 23754x^1403 + EE286x^1402 + E941Fx^1401 + E4E91x^1400 + 949D6x^1399 + 8ED88x^1398 + 454Bx^1397 + 2AF44x^1396 + C6EBBx^1395 + 93617x^1394 + 8B1F5x^1393 + E87BDx^1392 + 9E2E8x^1391 + B2C1Fx^1390 + 4B41Ex^1389 + 478A3x^1388 + 782F2x^1387 + 8F666x^1386 + 3FD29x^1385 + EB7FDx^1384 + 9F763x^1383 + 23CA4x^1382 + 90B63x^1381 + 65D18x^1380 + E8139x^1379 + A7AEEx^1378 + 8341Fx^1377 + F92AEx^1376 + 867D0x^1375 + 1F9DCx^1374 + E7246x^1373 + 64030x^1372 + B36CEx^1371 + 31235x^1370 + 5840x^1369 + 8ECA7x^1368 + 423B4x^1367 + E70C2x^1366 + AA826x^1365 + CA9F2x^1364 + C98D2x^1363 + BB99Cx^1362 + F05A5x^1361 + 5D442x^1360 + ACAC2x^1359 + 1DFB1x^1358 + 84E46x^1357 + 1DCFDx^1356 + D9414x^1355 + AA9C1x^1354 + D6D9Ex^1353 + 1F0B5x^1352 + 7EA51x^1351 + 83DF8x^1350 + 5BA94x^1349 + BFCF5x^1348 + A1632x^1347 + BDD3Cx^1346 + 939A5x^1345 + 6D7CAx^1344 + D0F64x^1343 + 1C371x^1342 + E9F5x^1341 + 164BCx^1340 + A260Dx^1339 + 6DC14x^1338 + C2E6Dx^1337 + CB8DDx^1336 + 7DDBDx^1335 + 8FCC5x^1334 + 80DDFx^1333 + EA37Dx^1332 + 4A800x^1331 + 81014x^1330 + 34582x^1329 + C1244x^1328 + 2ADB3x^1327 + 6B598x^1326 + 37985x^1325 + 68D68x^1324 + 9990Dx^1323 + A660Bx^1322 + 66392x^1321 + 3D372x^1320 + 3C873x^1319 + C7CB6x^1318 + 60C42x^1317 + 7D934x^1316 + 70CADx^1315 + F475Cx^1314 + 2AC20x^1313 + 16183x^1312 + 9EF6Fx^1311 + 3306Fx^1310 + 8144Dx^1309 + BE9CFx^1308 + 58EFEx^1307 + B2CC6x^1306 + 903F0x^1305 + 54989x^1304 + D3020x^1303 + 336Bx^1302 + CDB0Ex^1301 + 979B8x^1300 + 51577x^1299 + 789C2x^1298 + B38FCx^1297 + 78967x^1296 + D982Dx^1295 + 322A2x^1294 + 9B96Fx^1293 + B181Ax^1292 + 6DACCx^1291 + F8C0x^1290 + F613x^1289 + 11D14x^1288 + 7889Cx^1287 + C10DBx^1286 + 56EDCx^1285 + EAE75x^1284 + 75AB6x^1283 + 9833Fx^1282 + 3D8AEx^1281 + 2DDA5x^1280 + EED96x^1279 + DF27x^1278 + 4953Fx^1277 + 6E10Fx^1276 + A0256x^1275 + C0F3Ex^1274 + B1717x^1273 + 162E8x^1272 + B1A19x^1271 + 624C2x^1270 + 5E763x^1269 + F646Fx^1268 + 5A8E7x^1267 + 1F005x^1266 + 632B9x^1265 + D97Ax^1264 + 7F0F3x^1263 + 2ED81x^1262 + 288B0x^1261 + F1474x^1260 + F36A2x^1259 + 72F62x^1258 + 2AF19x^1257 + CDED4x^1256 + 9C190x^1255 + 45DC8x^1254 + 2D701x^1253 + 56D98x^1252 + C8541x^1251 + 283F1x^1250 + 53DFx^1249 + 978BEx^1248 + 944E1x^1247 + 186BFx^1246 + EE7Cx^1245 + 518CFx^1244 + CF588x^1243 + 49CFAx^1242 + 9ACC7x^1241 + BC1C2x^1240 + A6C40x^1239 + C1F8Ax^1238 + 87E1x^1237 + FAD23x^1236 + 7CACEx^1235 + 4B9ABx^1234 + 3FAC7x^1233 + BFAEEx^1232 + 32A79x^1231 + A2961x^1230 + 16898x^1229 + 55502x^1228 + D79Dx^1227 + 125C5x^1226 + 15E19x^1225 + C5AD1x^1224 + 75343x^1223 + BA06Cx^1222 + 90734x^1221 + 19406x^1220 + DD1F4x^1219 + B371Bx^1218 + 6FCFEx^1217 + 68817x^1216 + 23FECx^1215 + 24B5Dx^1214 + 5E78x^1213 + B74CCx^1212 + 9D2ABx^1211 + 81AA0x^1210 + 86CC4x^1209 + 7F16Dx^1208 + FB8B4x^1207 + 875E1x^1206 + A5549x^1205 + 209DBx^1204 + BD2EDx^1203 + F7694x^1202 + 58E6Bx^1201 + 15BA1x^1200 + 7835Bx^1199 + 1D94Bx^1198 + B3BEFx^1197 + 9030Cx^1196 + CDED2x^1195 + 846B3x^1194 + FAE79x^1193 + 8A5B4x^1192 + DAB52x^1191 + 1F076x^1190 + 89836x^1189 + 63B44x^1188 + 4153Fx^1187 + B7F8Dx^1186 + 5ABAx^1185 + F48B5x^1184 + 7E810x^1183 + 67FDx^1182 + B3B9x^1181 + 49B54x^1180 + 584Fx^1179 + C39C3x^1178 + 4FCACx^1177 + C4733x^1176 + B6736x^1175 + 941F4x^1174 + AC9Ax^1173 + 4F3Cx^1172 + 5C3D6x^1171 + C232x^1170 + 23FABx^1169 + F10B4x^1168 + 6CE16x^1167 + BED58x^1166 + 478C5x^1165 + D6020x^1164 + 5F269x^1163 + 6EBC8x^1162 + C4345x^1161 + 38C84x^1160 + 51C16x^1159 + F7F12x^1158 + 70E5Ax^1157 + 25420x^1156 + 6F06Ex^1155 + 5A39Bx^1154 + 7CF21x^1153 + A1B43x^1152 + B7240x^1151 + 5EF3Cx^1150 + 4D0ECx^1149 + 436E0x^1148 + CCC33x^1147 + E3C83x^1146 + F2AABx^1145 + AF242x^1144 + 5FFB3x^1143 + 98531x^1142 + 39D99x^1141 + F027x^1140 + DAEF7x^1139 + 96343x^1138 + E929Cx^1137 + D53Dx^1136 + C1B57x^1135 + 35BB5x^1134 + F7632x^1133 + 27361x^1132 + 8E9D6x^1131 + 65442x^1130 + 4B81Ax^1129 + AADADx^1128 + 85DDBx^1127 + 9E890x^1126 + 6518Cx^1125 + 43361x^1124 + BC6D4x^1123 + 11445x^1122 + C5D2Cx^1121 + EC62x^1120 + C4ABFx^1119 + 7BC9x^1118 + DA02Dx^1117 + 6A4EAx^1116 + 95B20x^1115 + 8767Ex^1114 + 8EFBEx^1113 + D95FBx^1112 + 245E7x^1111 + BC926x^1110 + 1706Dx^1109 + 587D9x^1108 + 8F86x^1107 + A3AF1x^1106 + 56BE5x^1105 + 8C628x^1104 + 4549Ex^1103 + 6C981x^1102 + 3E36Ax^1101 + DA4D7x^1100 + 61802x^1099 + 50B24x^1098 + B2109x^1097 + 9A20Cx^1096 + 40F19x^1095 + C400Bx^1094 + A4E05x^1093 + FADD1x^1092 + B7D19x^1091 + DD687x^1090 + 7C9D3x^1089 + E1A7Ax^1088 + 8B32Dx^1087 + B1BD8x^1086 + 82FEEx^1085 + CF89Fx^1084 + 5AB5Dx^1083 + F6585x^1082 + B3C2Ax^1081 + 7B4E4x^1080 + 15D40x^1079 + A1624x^1078 + EF015x^1077 + 20606x^1076 + 63821x^1075 + D8CC0x^1074 + DEBE2x^1073 + 52EF1x^1072 + 4EEDCx^1071 + 8B975x^1070 + D144Ax^1069 + 20F96x^1068 + 8F91Cx^1067 + 84A13x^1066 + 78F07x^1065 + 1CB8Cx^1064 + E7205x^1063 + 93FDDx^1062 + B028Cx^1061 + 89E84x^1060 + 2EB0x^1059 + 21638x^1058 + 2938Dx^1057 + 115x^1056 + 7676Bx^1055 + B12A3x^1054 + 4D35Ax^1053 + 13081x^1052 + BCC7Cx^1051 + BDCEAx^1050 + B2DB5x^1049 + EE63Ax^1048 + B3E52x^1047 + A8F92x^1046 + 30C7Ax^1045 + 29BF9x^1044 + E7030x^1043 + 90098x^1042 + 8BD6Ax^1041 + 16A44x^1040 + 40E36x^1039 + ECF07x^1038 + EE091x^1037 + 13CB3x^1036 + EF690x^1035 + 23476x^1034 + 1C198x^1033 + E3DE7x^1032 + 827AAx^1031 + 8F54x^1030 + 2071Fx^1029 + 9DAFCx^1028 + 86B0Ax^1027 + 7FD61x^1026 + B8939x^1025 + 69D7Dx^1024 + 6544Cx^1023 + 46027x^1022 + DF1B8x^1021 + 33FAx^1020 + F836Bx^1019 + BC741x^1018 + 10B78x^1017 + 498E7x^1016 + 96EBx^1015 + CD657x^1014 + 8CB57x^1013 + BF97x^1012 + 4E4DFx^1011 + E336Dx^1010 + 1FBEEx^1009 + 7E548x^1008 + E0CA4x^1007 + E559Dx^1006 + B8EA2x^1005 + 856B7x^1004 + 40043x^1003 + 8C0E2x^1002 + 9AE4Ax^1001 + 2289Dx^1000 + 67755x^999 + 8ED3Ax^998 + F956Fx^997 + 83A2Ax^996 + 1AE90x^995 + 579Ex^994 + 4EB14x^993 + CB922x^992 + 2AD4Fx^991 + F43DDx^990 + 44846x^989 + 12490x^988 + 151C8x^987 + 8B295x^986 + 963DEx^985 + F776Ex^984 + 8923Bx^983 + 6CA5Cx^982 + F545Bx^981 + 64F63x^980 + CDF41x^979 + 118E8x^978 + 8A2CFx^977 + DAEA3x^976 + 2A908x^975 + 69980x^974 + 4B5E5x^973 + 6DE88x^972 + CE471x^971 + 21B21x^970 + E63CBx^969 + F1000x^968 + CB271x^967 + 1689Ax^966 + 75FDx^965 + F920Fx^964 + C888x^963 + 12309x^962 + 6C8C3x^961 + 6B1DBx^960 + E200Bx^959 + 17C94x^958 + C96F6x^957 + 8C34x^956 + DEDEDx^955 + 25DC4x^954 + 77BB0x^953 + 57708x^952 + 7F071x^951 + 45CCAx^950 + A0BA3x^949 + 1AC6Ax^948 + 51049x^947 + 66AAx^946 + 8A38Dx^945 + 96E7Bx^944 + A60ECx^943 + F7CE2x^942 + 2378Fx^941 + 53A80x^940 + ABC77x^939 + C9ABDx^938 + 5C616x^937 + 822C0x^936 + 1F664x^935 + 28AD7x^934 + 11CA5x^933 + 140F5x^932 + E6C32x^931 + 50642x^930 + 7E286x^929 + 8DD25x^928 + AB503x^927 + DCD7Bx^926 + 423D3x^925 + F2A67x^924 + 1AE6Cx^923 + 3A09Fx^922 + 79A0Dx^921 + 1E88Ex^920 + 8331Bx^919 + CFCDAx^918 + 57921x^917 + 3498Ex^916 + C9D5Ex^915 + BC608x^914 + 98B16x^913 + 15D83x^912 + 6FD71x^911 + ED036x^910 + 2D24Cx^909 + 448E4x^908 + 38867x^907 + DD926x^906 + 4DDCBx^905 + 981C0x^904 + F3C29x^903 + 6ADAx^902 + 572EAx^901 + 27874x^900 + E7B31x^899 + 5F223x^898 + 4F77Fx^897 + AB87Ax^896 + 15459x^895 + BFBDDx^894 + 67638x^893 + 7F058x^892 + 326EBx^891 + 1D5ABx^890 + FBC59x^889 + ADBF1x^888 + 9ADFBx^887 + F1AE8x^886 + A879Dx^885 + A44BAx^884 + A8462x^883 + 6FEE9x^882 + 4F8D5x^881 + 32C97x^880 + 84C80x^879 + 49068x^878 + DC93Cx^877 + 4128Cx^876 + B383x^875 + D424Ax^874 + B0D34x^873 + B6132x^872 + 5A64Ex^871 + 2DF3Ax^870 + 14CCx^869 + BB75Ax^868 + 148F3x^867 + B04x^866 + 70F9Cx^865 + 44F55x^864 + F5D33x^863 + 65FFx^862 + 242FCx^861 + 28DE7x^860 + E009Dx^859 + C2F7Bx^858 + F21C8x^857 + 17282x^856 + DA9C1x^855 + A4657x^854 + F8062x^853 + BB572x^852 + A09Bx^851 + A4460x^850 + BDA75x^849 + 8D83Ex^848 + DB748x^847 + 984C2x^846 + C2EDEx^845 + AFAD0x^844 + 4B1EDx^843 + C4EFEx^842 + 8BD19x^841 + 21F50x^840 + 9DE20x^839 + 9BF9Fx^838 + E062Fx^837 + F2746x^836 + 22FC8x^835 + 7DB3Ex^834 + 6B141x^833 + 2DFCDx^832 + 421C0x^831 + E2406x^830 + 33693x^829 + 26134x^828 + 231C8x^827 + 75463x^826 + 48B13x^825 + 458D2x^824 + B0E4Dx^823 + D8B85x^822 + B8B6x^821 + 8BD04x^820 + 2F3DFx^819 + 908Cx^818 + 4CDDBx^817 + B4B6Bx^816 + 93004x^815 + C4819x^814 + 2C4A4x^813 + 2E8F6x^812 + 22225x^811 + 8F1F9x^810 + ED10Dx^809 + 4C474x^808 + CAF02x^807 + E7EA8x^806 + 3C6C5x^805 + DC5F0x^804 + 57778x^803 + 192AFx^802 + 404E4x^801 + 111EAx^800 + 8E2D6x^799 + 557F9x^798 + EBEB6x^797 + B2029x^796 + 3153Cx^795 + CAD86x^794 + EC7F2x^793 + 1725Fx^792 + 5A0ACx^791 + A6F85x^790 + D8087x^789 + 8B38Bx^788 + 3D118x^787 + BDF6Ax^786 + B406Ex^785 + 5ECF7x^784 + 4348Bx^783 + 7B7D3x^782 + 4F309x^781 + 7EC4Cx^780 + 2E7A9x^779 + A0793x^778 + E4734x^777 + 23412x^776 + 3ABC1x^775 + 493E5x^774 + 9811Cx^773 + D9407x^772 + BE606x^771 + B83C6x^770 + 8E766x^769 + D5819x^768 + A7A66x^767 + 27EF1x^766 + EDCB9x^765 + F5BE2x^764 + CA213x^763 + 1FD1Bx^762 + 21925x^761 + EB673x^760 + E5AB3x^759 + 1780Ax^758 + 515Cx^757 + 9734Ax^756 + 6DEF9x^755 + 146CEx^754 + BFA74x^753 + 2C891x^752 + 85495x^751 + 67311x^750 + 14F12x^749 + 8B77Dx^748 + 701DCx^747 + 6EFF5x^746 + 9CA0Bx^745 + D7F35x^744 + 6698x^743 + C8602x^742 + 44A59x^741 + 47E64x^740 + 2B51Cx^739 + 921F9x^738 + BA029x^737 + 8585Ex^736 + 55CD9x^735 + 882FCx^734 + BA747x^733 + 7C76x^732 + 46004x^731 + 2F974x^730 + 92872x^729 + A3DAx^728 + 595DBx^727 + 23F77x^726 + 6CDBx^725 + B91EDx^724 + 96CB9x^723 + B9147x^722 + 37974x^721 + AC64Dx^720 + CE269x^719 + 3B0A2x^718 + 2DD9Fx^717 + 8A3ABx^716 + CA548x^715 + F783x^714 + 4BD1x^713 + 3B953x^712 + 9722Fx^711 + CB42Fx^710 + AD88Cx^709 + 87BF4x^708 + 294C8x^707 + F3AF5x^706 + 43A5Ex^705 + 63834x^704 + 9088x^703 + DA1C7x^702 + E958Ax^701 + C20Fx^700 + 49FE8x^699 + 54A6Bx^698 + AECCBx^697 + 90E9Dx^696 + 61809x^695 + E34CCx^694 + CF31Dx^693 + A79D0x^692 + 965FBx^691 + A6DC8x^690 + C77CAx^689 + 3D419x^688 + 84C1Ax^687 + A7869x^686 + 63DECx^685 + BE4BDx^684 + 411DAx^683 + 46C07x^682 + BD18Bx^681 + EC427x^680 + A58FAx^679 + 9B72Cx^678 + 14CEEx^677 + B7342x^676 + 3DAF9x^675 + 7C963x^674 + FD7Bx^673 + 6DFEx^672 + D877Ex^671 + B6466x^670 + E3AC5x^669 + C6E3x^668 + 99074x^667 + D8232x^666 + 1A021x^665 + CBD18x^664 + C4A86x^663 + 34FAEx^662 + 87655x^661 + E218Cx^660 + 2F781x^659 + BFD6Ex^658 + 941DBx^657 + 13F16x^656 + A704x^655 + F6D21x^654 + E2A57x^653 + F80CDx^652 + 95B3Cx^651 + 95953x^650 + 505B6x^649 + 380BCx^648 + 204D7x^647 + E2816x^646 + A80ABx^645 + 4E3DAx^644 + 7D539x^643 + D9C84x^642 + B34BFx^641 + C76E5x^640 + D2F7Ax^639 + A8DA4x^638 + 12F9x^637 + E3371x^636 + 8901Cx^635 + AC463x^634 + 77955x^633 + 86528x^632 + AEBDFx^631 + 82650x^630 + 54A0x^629 + 9CBF6x^628 + EFF1Fx^627 + A8CC5x^626 + 72CDEx^625 + 517E1x^624 + AB39Ex^623 + CF5B2x^622 + EEBC6x^621 + 798CFx^620 + 991FEx^619 + 2A949x^618 + 92E16x^617 + 773F9x^616 + 2030Ax^615 + 2EA62x^614 + E9966x^613 + DB04Ex^612 + 745F8x^611 + 6E540x^610 + 38438x^609 + F5F59x^608 + A1C0Cx^607 + 503C7x^606 + 2F3Dx^605 + 332A7x^604 + EF460x^603 + EA6A5x^602 + A1E1Ax^601 + 5F3FFx^600 + F8EAAx^599 + 54E07x^598 + 76A6Fx^597 + 5AEA0x^596 + 894E4x^595 + 7E187x^594 + 45A63x^593 + 6B91Ex^592 + 89DABx^591 + BF77Bx^590 + C9BB1x^589 + 1EA5Ax^588 + 5641Fx^587 + C1860x^586 + 175F1x^585 + DDB95x^584 + 3166Fx^583 + 243F2x^582 + 64290x^581 + F0F5Bx^580 + F4F1Dx^579 + 2C225x^578 + 6C403x^577 + 86CC6x^576 + 278B9x^575 + 65D43x^574 + 260A6x^573 + 4B315x^572 + 9BA7Dx^571 + 9A376x^570 + 3B61Dx^569 + 72FEDx^568 + 20163x^567 + A134Bx^566 + 213C5x^565 + 93A35x^564 + E6EEAx^563 + DEFB8x^562 + C44FCx^561 + 829B8x^560 + BFFD0x^559 + 305B4x^558 + 13E1Dx^557 + ECE1Ax^556 + 935FFx^555 + 83C89x^554 + DB386x^553 + 430FDx^552 + EDD34x^551 + 84246x^550 + 49056x^549 + E01x^548 + F286Ex^547 + 90A0Bx^546 + 6EE31x^545 + 8AD26x^544 + 9BAEDx^543 + FA0C1x^542 + 1BCF2x^541 + D1E56x^540 + 25419x^539 + B5362x^538 + 4B12Ax^537 + ED6F3x^536 + D00FAx^535 + A55Ax^534 + CF743x^533 + 251DDx^532 + 41936x^531 + 13E27x^530 + AD11Bx^529 + 6F1C9x^528 + 24738x^527 + 9EB78x^526 + 81D8Ax^525 + ED168x^524 + 74A5x^523 + 9D379x^522 + 63579x^521 + AB4BBx^520 + F3A79x^519 + ECA2Bx^518 + D6C5Cx^517 + ACC32x^516 + D820Bx^515 + 668CDx^514 + 36623x^513 + 819B2x^512 + 29EA1x^511 + 44710x^510 + 8DCF7x^509 + 56D5Bx^508 + EC5BFx^507 + C3B77x^506 + 55E2x^505 + A03CBx^504 + 88688x^503 + 3B494x^502 + 1618Bx^501 + F23Ax^500 + 65F72x^499 + 6346x^498 + 87D54x^497 + 539FCx^496 + C113Cx^495 + F990Bx^494 + 40EE6x^493 + 89D56x^492 + 95EFEx^491 + 108E8x^490 + 70C73x^489 + F78A8x^488 + 65BC3x^487 + 2F89Cx^486 + F5A5Dx^485 + 6439Dx^484 + 7EA66x^483 + 18AB2x^482 + E607Bx^481 + A1DE7x^480 + FAE24x^479 + B594Ax^478 + 380ACx^477 + EAB04x^476 + A8FCx^475 + 1DED0x^474 + 233E5x^473 + A4335x^472 + 784D9x^471 + 7982Cx^470 + 5A2E4x^469 + 790AEx^468 + 296A1x^467 + E385Bx^466 + 180E8x^465 + 9C4A0x^464 + 77110x^463 + 586C6x^462 + AB9E0x^461 + 5740Ax^460 + AAF5x^459 + 2682Ax^458 + D3356x^457 + 4FEF2x^456 + EEF56x^455 + DA1C5x^454 + 6A833x^453 + 64622x^452 + F6086x^451 + 58AC9x^450 + 4A7B9x^449 + 18CB3x^448 + BB08Ax^447 + 257B8x^446 + A8EEAx^445 + 6FD8Ex^444 + 5550Fx^443 + AE754x^442 + 747E1x^441 + F767Ax^440 + 6BCE8x^439 + 58106x^438 + DC62Dx^437 + 8A7C5x^436 + A958Fx^435 + E0271x^434 + F091Bx^433 + 312E2x^432 + 9324Dx^431 + E935Fx^430 + 51E5Bx^429 + C453Ex^428 + 61065x^427 + E8433x^426 + D7AF1x^425 + 8C5Bx^424 + 9C2BEx^423 + 9651Ex^422 + EEE2Bx^421 + BF8E3x^420 + 7695x^419 + DE674x^418 + 728C5x^417 + 45BDDx^416 + D356Dx^415 + A74ADx^414 + 93E6Ex^413 + 6CCF1x^412 + D1E5Ax^411 + E7BBFx^410 + 645C3x^409 + EB9A3x^408 + ED590x^407 + 5CD43x^406 + A100Cx^405 + 58717x^404 + 704Ax^403 + 56F34x^402 + F3E1Ax^401 + 1D13Ax^400 + B9BD3x^399 + 52544x^398 + 678EBx^397 + 2C8C0x^396 + AA501x^395 + 72B20x^394 + 79FBCx^393 + 3AB9Cx^392 + 124F0x^391 + 25383x^390 + A28F1x^389 + 9369Ax^388 + F8C91x^387 + B4ECCx^386 + DF25Fx^385 + 4C4D4x^384 + D3A8Ex^383 + 4E5C9x^382 + 2C016x^381 + CE532x^380 + CAA86x^379 + 871C2x^378 + D8160x^377 + 462E3x^376 + 2366Ax^375 + 831A9x^374 + 93E9Ax^373 + 1DBD1x^372 + 90008x^371 + CADB4x^370 + 9B54Dx^369 + BFA93x^368 + 51239x^367 + ABC50x^366 + 7C0A5x^365 + 838FBx^364 + 27573x^363 + E111x^362 + F0BE3x^361 + D607Ax^360 + 2A1BDx^359 + F95CDx^358 + 18D74x^357 + 7A43Bx^356 + 42EB6x^355 + E23F0x^354 + 4BDC4x^353 + 36860x^352 + E9117x^351 + 42746x^350 + C4B39x^349 + 22045x^348 + 1C93Ex^347 + BF3EDx^346 + AFF0Cx^345 + D6984x^344 + 152CEx^343 + B6733x^342 + F8950x^341 + ECA28x^340 + 9C661x^339 + DE991x^338 + 1C685x^337 + CA96x^336 + D7AE0x^335 + 80B7x^334 + 3A13x^333 + D943Dx^332 + B7C6Dx^331 + 240D2x^330 + 44389x^329 + 6F619x^328 + 6E8D6x^327 + 32C3x^326 + F08BBx^325 + BD5C5x^324 + D800Ax^323 + 1125Ex^322 + 30E6Ex^321 + A190Dx^320 + 47D67x^319 + 348F5x^318 + F42ACx^317 + FB3FDx^316 + C428Ax^315 + A3A97x^314 + D9AF2x^313 + F1AA5x^312 + 3FF44x^311 + F3E5Dx^310 + F1062x^309 + 742B2x^308 + 92313x^307 + 2A94x^306 + 48958x^305 + C1161x^304 + 7C576x^303 + F5BA2x^302 + 3ECE2x^301 + CE1F9x^300 + 1B360x^299 + 5A522x^298 + CDFB4x^297 + 5BA7Cx^296 + 5B7Fx^295 + 4CBA0x^294 + BBB23x^293 + CA94Fx^292 + 863A7x^291 + 25275x^290 + 6C976x^289 + 80367x^288 + C553Dx^287 + 7A905x^286 + 56663x^285 + C2C15x^284 + C84F2x^283 + 1F230x^282 + 4B3BFx^281 + 1D1B6x^280 + BB698x^279 + 9D872x^278 + 87CDDx^277 + 1DC1Dx^276 + 5C30Cx^275 + 72CB0x^274 + F86E2x^273 + 1D6F6x^272 + 6083Fx^271 + CA312x^270 + 66BF8x^269 + 65FA1x^268 + C1A9Dx^267 + F6B4Bx^266 + 9D765x^265 + C6C0Ax^264 + B9DEEx^263 + 59E8Ax^262 + 62224x^261 + 38089x^260 + 12FD1x^259 + 1F4FFx^258 + 715B7x^257 + 60E14x^256 + B1CCCx^255 + A74B7x^254 + 8A947x^253 + BFDF6x^252 + 23992x^251 + F545Cx^250 + CA2EEx^249 + 568D6x^248 + 92219x^247 + 7D864x^246 + 32877x^245 + 6F2A0x^244 + 327A2x^243 + 89A7x^242 + 83830x^241 + 9A3D5x^240 + 7B11Ex^239 + 26954x^238 + 9BD9Cx^237 + BFF52x^236 + 4849Ax^235 + F3AA4x^234 + 9FB63x^233 + AF708x^232 + 8948Cx^231 + ED39Ex^230 + CC35Cx^229 + 4121Fx^228 + 54714x^227 + 6B545x^226 + 632DEx^225 + 425D6x^224 + C9EE6x^223 + 4C950x^222 + 87624x^221 + 123F3x^220 + CC2FEx^219 + 90B5Fx^218 + 6F464x^217 + 97Bx^216 + C29C9x^215 + 68BCFx^214 + B5290x^213 + 6AB95x^212 + F0AC2x^211 + 54A6Ax^210 + 6C867x^209 + FBFC1x^208 + BBAECx^207 + BBCC6x^206 + E4678x^205 + DA41Fx^204 + E169Ax^203 + 645BBx^202 + D4178x^201 + F9A18x^200 + FA1F5x^199 + CA3FCx^198 + 501EFx^197 + ABDDAx^196 + ADE9Fx^195 + 4275Dx^194 + 99801x^193 + CBF88x^192 + 8AB5Dx^191 + 36494x^190 + 971B2x^189 + 83D18x^188 + 966BEx^187 + 89235x^186 + 7C23Fx^185 + ACF6Ex^184 + 3153Ax^183 + 4CA0Cx^182 + 9D559x^181 + 8FA14x^180 + A5971x^179 + 42422x^178 + 66DE4x^177 + 2744Dx^176 + F8837x^175 + 92548x^174 + 714BAx^173 + E851Fx^172 + E2803x^171 + 694C3x^170 + 1622Ex^169 + 380B1x^168 + 65A8Cx^167 + 3A5B9x^166 + DC50Dx^165 + 642C1x^164 + DF6FFx^163 + DDF5Cx^162 + 2D224x^161 + B0372x^160 + 7EC16x^159 + 7E538x^158 + 7222Dx^157 + 1C766x^156 + C0720x^155 + E2EEDx^154 + EF8B0x^153 + 4C130x^152 + 909DAx^151 + 232B9x^150 + 7EE2Ex^149 + D5256x^148 + 4299Ax^147 + A547Fx^146 + B126Ex^145 + 10EE1x^144 + 7BE15x^143 + C552Cx^142 + ED3B3x^141 + 7C902x^140 + 6C265x^139 + 70AADx^138 + DF8ECx^137 + 338D8x^136 + E74EFx^135 + 522Ex^134 + 3DF6Ax^133 + C0434x^132 + 64058x^131 + 80699x^130 + 9EF27x^129 + 3C51x^128 + CC27Cx^127 + F525Bx^126 + 4A876x^125 + 89C40x^124 + B36Bx^123 + 68C66x^122 + 3D8C8x^121 + FDD8x^120 + DED6Dx^119 + 1E5C7x^118 + A5D2x^117 + AC022x^116 + 20E8Cx^115 + CABCCx^114 + 4FE00x^113 + 7F691x^112 + 92808x^111 + 4C6AAx^110 + 6CD6Dx^109 + BD716x^108 + 2F17Ax^107 + 91A8Dx^106 + 59C68x^105 + 2368x^104 + 98A3Ax^103 + 4B275x^102 + 8424Cx^101 + EA06Fx^100 + 21E22x^99 + 3C055x^98 + 8BF9Dx^97 + 19F3Ex^96 + BDF85x^95 + A55E4x^94 + 2A1C0x^93 + B379Dx^92 + 4106Fx^91 + EBE19x^90 + AF300x^89 + 662A6x^88 + 6D671x^87 + 3731Ex^86 + 2D5x^85 + 17266x^84 + BF24Cx^83 + 2BD17x^82 + 4001Ax^81 + 3EB79x^80 + 87Ax^79 + A4338x^78 + 7652Bx^77 + 756F6x^76 + EBBE4x^75 + 352BDx^74 + B227x^73 + A7Cx^72 + F7654x^71 + C6E5x^70 + 84C91x^69 + F8D34x^68 + 67CBEx^67 + 65372x^66 + 57C4Ex^65 + 86DC7x^64 + 65355x^63 + D441Ex^62 + DDBA3x^61 + 46888x^60 + 8621Ex^59 + 7D1E2x^58 + 3E907x^57 + 8B10Bx^56 + AFE02x^55 + 22A95x^54 + E8C0Ax^53 + 355E5x^52 + 4D6A0x^51 + A829Ax^50 + 53039x^49 + F83D0x^48 + AD89Ex^47 + 61651x^46 + AE364x^45 + 5C8B0x^44 + 8AD41x^43 + 3CAD1x^42 + 37951x^41 + 9525Cx^40 + B5C28x^39 + BB06Dx^38 + 1166Ax^37 + D56B6x^36 + AD606x^35 + 2E13Bx^34 + F58E0x^33 + C834Cx^32 + F52B0x^31 + 1DB1Bx^30 + 9693x^29 + ED0C7x^28 + 96400x^27 + 921F9x^26 + FB93x^25 + FA718x^24 + F1E20x^23 + 662A9x^22 + A780Cx^21 + CD4Ex^20 + E0FECx^19 + B800Dx^18 + 4F7F6x^17 + EB848x^16 + 6B577x^15 + 24A5Cx^14 + 9F57x^13 + 595C5x^12 + CF7D6x^11 + 382E8x^10 + 17571x^9 + ACCD7x^8 + 5036Cx^7 + 5E52x^6 + 5586Ex^5 + 449BAx^4 + BB6C3x^3 + 75DD0x^2 + 78808x^1 + 7E800'
    )
  })
  test('It should not be in NTT form (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    expect(item.isNttForm).toEqual(false)
  })
  test('It should be in NTT form (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    expect(item.isNttForm).toEqual(true)
  })
  test('It should return the scale (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    expect(item.scale).toEqual(Math.pow(2, 20))
  })
  test('It should return a parms id type', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const parms = item.parmsId
    const values = parms.values
    expect(Array.isArray(values)).toBe(true)
    values.forEach(x => {
      expect(typeof x).toBe('bigint')
    })
    expect(values).toEqual([0n, 0n, 0n, 0n])
  })
  test('It should return the currently used memory pool handle', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const pool = item.pool
    expect(pool.constructor.name).toBe('MemoryPoolHandle')
  })
  test('It should save to a string (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'save')
    const str = item.save()
    expect(spyOn).toHaveBeenCalled()
    expect(typeof str).toBe('string')
  })
  test('It should save to a string (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    const spyOn = jest.spyOn(item, 'save')
    const str = item.save()
    expect(spyOn).toHaveBeenCalled()
    expect(typeof str).toBe('string')
  })
  test('It should load from a string (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const str = item.save()
    item.delete()
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'load')
    newItem.load(context, str)
    expect(spyOn).toHaveBeenCalledWith(context, str)
    expect(newItem.save()).toBe(str)
  })
  test('It should load from a string (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    const str = item.save()
    item.delete()
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'load')
    newItem.load(ckksContext, str)
    expect(spyOn).toHaveBeenCalledWith(ckksContext, str)
    expect(newItem.save()).toBe(str)
  })
  test('It should copy another instance (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'copy')
    newItem.copy(item)
    expect(spyOn).toHaveBeenCalledWith(item)
    expect(newItem.save()).toEqual(item.save())
  })
  test('It should copy another instance (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'copy')
    newItem.copy(item)
    expect(spyOn).toHaveBeenCalledWith(item)
    expect(newItem.save()).toEqual(item.save())
  })
  test('It should clone itself (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const spyOn = jest.spyOn(item, 'clone')
    const newItem = item.clone()
    expect(spyOn).toHaveBeenCalledWith()
    expect(newItem).toBeDefined()
    expect(typeof newItem.constructor).toBe('function')
    expect(newItem).toBeInstanceOf(Object)
    expect(newItem.constructor).toBe(Object)
    expect(newItem.instance.constructor.name).toBe('Plaintext')
    expect(newItem.save()).toEqual(item.save())
  })
  test('It should clone itself (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    const spyOn = jest.spyOn(item, 'clone')
    const newItem = item.clone()
    expect(spyOn).toHaveBeenCalledWith()
    expect(newItem).toBeDefined()
    expect(typeof newItem.constructor).toBe('function')
    expect(newItem).toBeInstanceOf(Object)
    expect(newItem.constructor).toBe(Object)
    expect(newItem.instance.constructor.name).toBe('Plaintext')
    expect(newItem.save()).toEqual(item.save())
  })
  test('It should move another instance into itself and delete the old (bfv)', () => {
    const arr = Int32Array.from(
      Array.from({ length: encoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    encoder.encode(arr, item)
    const str = item.save()
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'move')
    newItem.move(item)
    expect(spyOn).toHaveBeenCalledWith(item)
    expect(item.instance).toBeNull()
    expect(() => item.isZero).toThrow(TypeError)
    expect(newItem.save()).toEqual(str)
  })
  test('It should move another instance into itself and delete the old (ckks)', () => {
    const arr = Float64Array.from(
      Array.from({ length: ckksEncoder.slotCount }).fill(5)
    )
    const item = Morfix.PlainText()
    ckksEncoder.encode(arr, Math.pow(2, 20), item)
    const str = item.save()
    const newItem = Morfix.PlainText()
    const spyOn = jest.spyOn(newItem, 'move')
    newItem.move(item)
    expect(spyOn).toHaveBeenCalledWith(item)
    expect(item.instance).toBeNull()
    expect(() => item.isZero).toThrow(TypeError)
    expect(newItem.save()).toEqual(str)
  })
})
